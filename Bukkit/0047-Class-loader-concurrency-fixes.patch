From fbbd7aa9ab7fcce54af6ac90a25e76ccfb7b935d Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Fri, 29 May 2015 01:08:37 -0400
Subject: [PATCH] Class loader concurrency fixes


diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
index e5ddef2..1f25342 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
@@ -26,7 +26,7 @@ import org.bukkit.util.Vector;
 public class ConfigurationSerialization {
     public static final String SERIALIZED_TYPE_KEY = "==";
     private final Class<? extends ConfigurationSerializable> clazz;
-    private static Map<String, Class<? extends ConfigurationSerializable>> aliases = new HashMap<String, Class<? extends ConfigurationSerializable>>();
+    private static final Map<String, Class<? extends ConfigurationSerializable>> aliases = new HashMap<String, Class<? extends ConfigurationSerializable>>();
 
     static {
         registerClass(Vector.class);
@@ -205,8 +205,10 @@ public class ConfigurationSerialization {
         DelegateDeserialization delegate = clazz.getAnnotation(DelegateDeserialization.class);
 
         if (delegate == null) {
-            registerClass(clazz, getAlias(clazz));
-            registerClass(clazz, clazz.getName());
+            synchronized(aliases) {
+                registerClass(clazz, getAlias(clazz));
+                registerClass(clazz, clazz.getName());
+            }
         }
     }
 
@@ -219,7 +221,9 @@ public class ConfigurationSerialization {
      * @see SerializableAs
      */
     public static void registerClass(Class<? extends ConfigurationSerializable> clazz, String alias) {
-        aliases.put(alias, clazz);
+        synchronized(aliases) {
+            aliases.put(alias, clazz);
+        }
     }
 
     /**
@@ -228,7 +232,9 @@ public class ConfigurationSerialization {
      * @param alias Alias to unregister
      */
     public static void unregisterClass(String alias) {
-        aliases.remove(alias);
+        synchronized(aliases) {
+            aliases.remove(alias);
+        }
     }
 
     /**
@@ -238,8 +244,8 @@ public class ConfigurationSerialization {
      * @param clazz Class to unregister
      */
     public static void unregisterClass(Class<? extends ConfigurationSerializable> clazz) {
-        while (aliases.values().remove(clazz)) {
-            ;
+        synchronized(aliases) {
+            while (aliases.values().remove(clazz));
         }
     }
 
@@ -251,7 +257,9 @@ public class ConfigurationSerialization {
      * @return Registered class, or null if not found
      */
     public static Class<? extends ConfigurationSerializable> getClassByAlias(String alias) {
-        return aliases.get(alias);
+        synchronized(aliases) {
+            return aliases.get(alias);
+        }
     }
 
     /**
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index e934d51..60c8d84 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -12,6 +12,10 @@ import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.logging.Level;
@@ -47,8 +51,9 @@ import org.yaml.snakeyaml.error.YAMLException;
 public final class JavaPluginLoader implements PluginLoader {
     final Server server;
     private final Pattern[] fileFilters = new Pattern[] { Pattern.compile("\\.jar$"), };
-    private final Map<String, Class<?>> classes = new HashMap<String, Class<?>>();
+    private final ConcurrentMap<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
     private final Map<String, PluginClassLoader> loaders = new LinkedHashMap<String, PluginClassLoader>();
+    private final ReadWriteLock loaderLock = new ReentrantReadWriteLock();
 
     /**
      * This class was not meant to be constructed explicitly
@@ -113,15 +118,17 @@ public final class JavaPluginLoader implements PluginLoader {
             ));
         }
 
-        for (final String pluginName : description.getDepend()) {
-            if (loaders == null) {
-                throw new UnknownDependencyException(pluginName);
-            }
-            PluginClassLoader current = loaders.get(pluginName);
+        loaderLock.readLock().lock();
+        try {
+            for (final String pluginName : description.getDepend()) {
+                PluginClassLoader current = loaders.get(pluginName);
 
-            if (current == null) {
-                throw new UnknownDependencyException(pluginName);
+                if (current == null) {
+                    throw new UnknownDependencyException(pluginName);
+                }
             }
+        } finally {
+            loaderLock.readLock().unlock();
         }
 
         final PluginClassLoader loader;
@@ -133,7 +140,13 @@ public final class JavaPluginLoader implements PluginLoader {
             throw new InvalidPluginException(ex);
         }
 
-        loaders.put(description.getName(), loader);
+        loaderLock.writeLock().lock();
+        try {
+            loaders.put(description.getName(), loader);
+        }
+        finally {
+            loaderLock.writeLock().unlock();
+        }
 
         return loader.plugin;
     }
@@ -201,9 +214,7 @@ public final class JavaPluginLoader implements PluginLoader {
     }
 
     void setClass(final String name, final Class<?> clazz) {
-        if (!classes.containsKey(name)) {
-            classes.put(name, clazz);
-
+        if (classes.putIfAbsent(name, clazz) == null) {
             if (ConfigurationSerializable.class.isAssignableFrom(clazz)) {
                 Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
                 ConfigurationSerialization.registerClass(serializable);
@@ -319,8 +330,13 @@ public final class JavaPluginLoader implements PluginLoader {
 
             String pluginName = jPlugin.getDescription().getName();
 
-            if (!loaders.containsKey(pluginName)) {
-                loaders.put(pluginName, (PluginClassLoader) jPlugin.getClassLoader());
+            loaderLock.writeLock().lock();
+            try {
+                if (!loaders.containsKey(pluginName)) {
+                    loaders.put(pluginName, (PluginClassLoader) jPlugin.getClassLoader());
+                }
+            } finally {
+                loaderLock.writeLock().unlock();
             }
 
             try {
@@ -353,7 +369,12 @@ public final class JavaPluginLoader implements PluginLoader {
                 server.getLogger().log(Level.SEVERE, "Error occurred while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
-            loaders.remove(jPlugin.getDescription().getName());
+            loaderLock.writeLock().lock();
+            try {
+                loaders.remove(jPlugin.getDescription().getName());
+            } finally {
+                loaderLock.writeLock().unlock();
+            }
 
             if (cloader instanceof PluginClassLoader) {
                 PluginClassLoader loader = (PluginClassLoader) cloader;
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 13f8633..2d81aca 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -4,10 +4,11 @@ import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
-import java.util.HashMap;
-import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
 
+import com.google.common.collect.ImmutableSet;
 import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
@@ -17,7 +18,7 @@ import org.bukkit.plugin.PluginDescriptionFile;
  */
 final class PluginClassLoader extends URLClassLoader {
     private final JavaPluginLoader loader;
-    private final Map<String, Class<?>> classes = new HashMap<String, Class<?>>();
+    private final ConcurrentMap<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
     private final PluginDescriptionFile description;
     private final File dataFolder;
     private final File file;
@@ -25,6 +26,10 @@ final class PluginClassLoader extends URLClassLoader {
     private JavaPlugin pluginInit;
     private IllegalStateException pluginState;
 
+    static {
+        registerAsParallelCapable();
+    }
+
     PluginClassLoader(final JavaPluginLoader loader, final ClassLoader parent, final PluginDescriptionFile description, final File dataFolder, final File file) throws InvalidPluginException, MalformedURLException {
         super(new URL[] {file.toURI().toURL()}, parent);
         Validate.notNull(loader, "Loader cannot be null");
@@ -67,28 +72,25 @@ final class PluginClassLoader extends URLClassLoader {
             throw new ClassNotFoundException(name);
         }
         Class<?> result = classes.get(name);
+        if(result != null) return result;
 
-        if (result == null) {
-            if (checkGlobal) {
-                result = loader.getClassByName(name);
-            }
-
-            if (result == null) {
-                result = super.findClass(name);
-
-                if (result != null) {
-                    loader.setClass(name, result);
-                }
-            }
-
-            classes.put(name, result);
+        if (checkGlobal) {
+            result = loader.getClassByName(name);
+            if(result != null) return result;
         }
 
-        return result;
+        result = super.findClass(name);
+        Class<?> previous = classes.putIfAbsent(name, result);
+        if (previous == null) {
+            loader.setClass(name, result);
+            return result;
+        } else {
+            return previous;
+        }
     }
 
     Set<String> getClasses() {
-        return classes.keySet();
+        return ImmutableSet.copyOf(classes.keySet());
     }
 
     synchronized void initialize(JavaPlugin javaPlugin) {
-- 
1.9.0

