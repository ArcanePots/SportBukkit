From fbf389cd4e62cc97cda8fbbe15bdb7019781e5b6 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 4 Apr 2015 22:59:54 -0400
Subject: [PATCH] Complete resource pack API


diff --git a/src/main/java/org/bukkit/ResourcePackStatus.java b/src/main/java/org/bukkit/ResourcePackStatus.java
new file mode 100644
index 0000000..8d1c420
--- /dev/null
+++ b/src/main/java/org/bukkit/ResourcePackStatus.java
@@ -0,0 +1,18 @@
+package org.bukkit;
+
+/**
+ * These are the responses a player can send when asked to use a custom
+ * resource pack.
+ *
+ * When the player accepts or declines a resource pack, the client will
+ * immediately send the {@link #ACCEPTED} or {@link #DECLINED} status to
+ * the server. If the player accepts, the client will download the resource
+ * pack, install it, and then send the {@link #LOADED} status. If anything
+ * fails, it will send the {@link #FAILED} status.
+ *
+ * If the player already has a saved decision, the same status responses
+ * are sent, starting immediately when the client receives the resource pack.
+ */
+public enum ResourcePackStatus {
+    ACCEPTED, DECLINED, LOADED, FAILED
+}
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 1389d3e..c55bb05 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -11,6 +11,7 @@ import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.Note;
 import org.bukkit.OfflinePlayer;
+import org.bukkit.ResourcePackStatus;
 import org.bukkit.Skin;
 import org.bukkit.Sound;
 import org.bukkit.Statistic;
@@ -1127,13 +1128,36 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @param url The URL from which the client will download the resource
      *     pack. The string must contain only US-ASCII characters and should
      *     be encoded as per RFC 1738.
+     * @param hash A 40 character hexadecimal and lowercase SHA-1 digest of
+     *             the resource pack file.
      * @throws IllegalArgumentException Thrown if the URL is null.
      * @throws IllegalArgumentException Thrown if the URL is too long. The
      *     length restriction is an implementation specific arbitrary value.
      */
+    public void setResourcePack(String url, String hash);
+
+    @Deprecated
     public void setResourcePack(String url);
 
     /**
+     * @return the most recent resource pack status received from the player,
+     *         or null if no status has ever been received from this player.
+     */
+    public ResourcePackStatus getResourcePackStatus();
+
+    /**
+     * @return the most recent resource pack hash received from the player,
+     *         or null if no hash has ever been received from this player.
+     */
+    public String getResourcePackHash();
+
+    /**
+     * @return true if the last resource pack status received from this player
+     *         was {@link ResourcePackStatus#LOADED}
+     */
+    public boolean hasResourcePack();
+
+    /**
      * Gets the Scoreboard displayed to this player
      *
      * @return The current scoreboard seen by this player
diff --git a/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
new file mode 100644
index 0000000..e87d824
--- /dev/null
+++ b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
@@ -0,0 +1,43 @@
+package org.bukkit.event.player;
+
+import org.bukkit.ResourcePackStatus;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+
+/**
+ * This event is fired when a player sends their resource pack status
+ * to the server, in response to the server asking them to use a custom
+ * resource pack e.g. with {@link Player#setResourcePack}.
+ *
+ * See {@link ResourcePackStatus} for details about the process.
+ */
+public class PlayerResourcePackStatusEvent extends PlayerEvent {
+
+    private final ResourcePackStatus status;
+    private final String hash;
+
+    public PlayerResourcePackStatusEvent(Player who, ResourcePackStatus status, String hash) {
+        super(who);
+        this.status = status;
+        this.hash = hash;
+    }
+
+    public ResourcePackStatus getStatus() {
+        return status;
+    }
+
+    public String getHash() {
+        return hash;
+    }
+
+    private static final HandlerList handlers = new HandlerList();
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
-- 
1.9.0

