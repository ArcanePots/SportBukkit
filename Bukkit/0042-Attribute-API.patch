From 9c8bcb32eeaa940d83799df96950e5d9d20df009 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Tue, 19 May 2015 06:30:47 -0400
Subject: [PATCH] Attribute API


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index ecf29ce..2fc8e3f 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -13,6 +13,7 @@ import java.util.UUID;
 import java.util.logging.Logger;
 
 import org.bukkit.Warning.WarningState;
+import org.bukkit.attributes.AttributeFactory;
 import org.bukkit.command.CommandException;
 import org.bukkit.command.CommandMap;
 import org.bukkit.command.CommandSender;
@@ -1196,4 +1197,8 @@ public final class Bukkit {
     public static void broadcast(net.md_5.bungee.api.chat.BaseComponent... components) {
         server.broadcast(components);
     }
+
+    public static AttributeFactory getAttributeFactory() {
+        return server.getAttributeFactory();
+    }
 }
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index af2806b..20ed8f6 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -13,6 +13,7 @@ import java.util.UUID;
 import java.util.logging.Logger;
 
 import org.bukkit.Warning.WarningState;
+import org.bukkit.attributes.AttributeFactory;
 import org.bukkit.command.CommandException;
 import org.bukkit.command.CommandMap;
 import org.bukkit.command.CommandSender;
@@ -976,4 +977,9 @@ public interface Server extends PluginMessageRecipient {
      * @param components the components to send
      */
     public void broadcast(net.md_5.bungee.api.chat.BaseComponent... components);
+
+    /**
+     * Get the {@link AttributeFactory} for this server
+     */
+    AttributeFactory getAttributeFactory();
 }
diff --git a/src/main/java/org/bukkit/attributes/Attribute.java b/src/main/java/org/bukkit/attributes/Attribute.java
new file mode 100644
index 0000000..3f83c46
--- /dev/null
+++ b/src/main/java/org/bukkit/attributes/Attribute.java
@@ -0,0 +1,37 @@
+package org.bukkit.attributes;
+
+/**
+ * An {@link Attribute} defines some effect on {@link org.bukkit.entity.LivingEntity}s
+ * that is controlled by a numeric parameter. Plugins can attach
+ * {@link AttributeModifier}s to entities to change this parameter. Modifiers can also
+ * be attached to {@link org.bukkit.inventory.ItemStack}s, which will then be applied
+ * to any entity "using" the item (which means different things, depending on the item).
+ *
+ * There are a few attributes built-in to the game, and these are available through the
+ * {@link AttributeFactory} returned by {@link org.bukkit.Server#getAttributeFactory}.
+ */
+public class Attribute {
+
+    private final String name;
+    private final double defaultValue;
+
+    public Attribute(String name, double defaultValue) {
+        this.name = name;
+        this.defaultValue = defaultValue;
+    }
+
+    /**
+     * This is used to identify the attribute for the purposes of attaching
+     * modifiers to entities and items. It should be globally unique.
+     */
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * The initial base value of the attribute.
+     */
+    public double getDefault() {
+        return defaultValue;
+    }
+}
diff --git a/src/main/java/org/bukkit/attributes/AttributeFactory.java b/src/main/java/org/bukkit/attributes/AttributeFactory.java
new file mode 100644
index 0000000..45b23c1
--- /dev/null
+++ b/src/main/java/org/bukkit/attributes/AttributeFactory.java
@@ -0,0 +1,30 @@
+package org.bukkit.attributes;
+
+import java.util.Map;
+import java.util.UUID;
+
+/**
+ * Provides access to built-in {@link Attribute}s and creation of {@link AttributeModifier}s.
+ */
+public interface AttributeFactory {
+
+    /**
+     * Return all known {@link Attribute}s with built-in implementations, mapped from their names.
+     */
+    Map<String, ? extends Attribute> knownAttributes();
+
+    /**
+     * Return the built-in {@link Attribute} with the given name, or null if no such attribute is known.
+     */
+    Attribute knownAttribute(String name);
+
+    /**
+     * Return a newly created {@link AttributeModifier}.
+     */
+    AttributeModifier newAttributeModifier(UUID id, String name, double value, AttributeModifier.Operation operation);
+
+    /**
+     * Return a newly created {@link AttributeModifier}, with an automatically generated UUID.
+     */
+    AttributeModifier newAttributeModifier(String name, double value, AttributeModifier.Operation operation);
+}
diff --git a/src/main/java/org/bukkit/attributes/AttributeModifier.java b/src/main/java/org/bukkit/attributes/AttributeModifier.java
new file mode 100644
index 0000000..97eb157
--- /dev/null
+++ b/src/main/java/org/bukkit/attributes/AttributeModifier.java
@@ -0,0 +1,56 @@
+package org.bukkit.attributes;
+
+import java.util.UUID;
+
+/** <pre>
+ * A numerical transformation that can be applied to the values of {@link Attribute}s.
+ * Modifiers are identified by their UUID, and two modifiers with the same UUID will
+ * always be considered the same modifier, regardless of whether their other properties
+ * match.
+ *
+ * {@link AttributeModifier}s can be created through the {@link AttributeFactory},
+ * which is provided by {@link org.bukkit.Server#getAttributeFactory()}.
+ *
+ * An {@link AttributeModifier} has a value and an {@link Operation} used to combine
+ * that value with the prior value of the {@link Attribute}. There are three operations
+ * available:
+ *
+ *    {@link Operation#ADD} - add the modifier's value
+ *    {@link Operation#BASE} - add the current value multiplied by the modifier's value
+ *    {@link Operation#MULTIPLY} - multiply by the modifier's value
+ *
+ * The operations are applied in the above order, but for each operation, all of its
+ * modifiers are applied simultaneously. So, all modifiers are applied in three big
+ * operations, like this:
+ *
+ * X <- A1 + A2 + A3 + ...
+ * X <- (B1 * X) + (B2 * X) + (B3 * X) + ...
+ * X <- X * M1 * M2 * M3 ...
+ * </pre>
+ */
+public interface AttributeModifier {
+
+    enum Operation { ADD, BASE, MULTIPLY }
+
+    /**
+     * A human-readable name or description for this modifier. This has no
+     * functional purpose, it exists only for debugging.
+     */
+    String getName();
+
+    /**
+     * Globally unique identifier for this modifier. Two modifiers with
+     * the same UUID will be considered the same modifier in every sense.
+     */
+    UUID getId();
+
+    /**
+     * The value of this modifier
+     */
+    double getValue();
+
+    /**
+     * The numerical operation applied by this modifier
+     */
+    Operation getOperation();
+}
diff --git a/src/main/java/org/bukkit/attributes/AttributeOwner.java b/src/main/java/org/bukkit/attributes/AttributeOwner.java
new file mode 100644
index 0000000..947ae38
--- /dev/null
+++ b/src/main/java/org/bukkit/attributes/AttributeOwner.java
@@ -0,0 +1,44 @@
+package org.bukkit.attributes;
+
+import java.util.Collection;
+import java.util.UUID;
+
+/**
+ * Something that has values for {@link Attribute}s and is affected by them.
+ */
+public interface AttributeOwner {
+
+    /**
+     * Is the given {@link Attribute} applicable to this owner?
+     */
+    boolean hasAttribute(Attribute attribute);
+
+    /**
+     * Get all {@link Attribute}s applicable to this owner
+     */
+    Collection<Attribute> getAttributes();
+
+    /**
+     * Get the value object of the given {@link Attribute}, or null
+     * if the attribute is not applicable to this owner.
+     */
+    AttributeValue getAttributeValue(Attribute attribute);
+
+    /**
+     * Get the value object of the {@link Attribute} with the given name,
+     * or null if the owner has no applicable attribute by that name.
+     */
+    AttributeValue getAttributeValue(String name);
+
+    /**
+     * Remove the given {@link AttributeModifier} from all of this owner's
+     * {@link AttributeValue}s.
+     */
+    void removeAttributeModifier(AttributeModifier modifier);
+
+    /**
+     * Remove the {@link AttributeModifier} with the given UUID from all of
+     * this owner's {@link AttributeValue}s.
+     */
+    void removeAttributeModifier(UUID id);
+}
diff --git a/src/main/java/org/bukkit/attributes/AttributeValue.java b/src/main/java/org/bukkit/attributes/AttributeValue.java
new file mode 100644
index 0000000..f3a47de
--- /dev/null
+++ b/src/main/java/org/bukkit/attributes/AttributeValue.java
@@ -0,0 +1,61 @@
+package org.bukkit.attributes;
+
+import java.util.UUID;
+
+/**
+ * The state of a particular {@link Attribute} for a particular {@link org.bukkit.entity.LivingEntity},
+ * consisting of a base value and a set of {@link AttributeModifier}s.
+ */
+public interface AttributeValue {
+
+    /**
+     * The {@link Attribute} this value is for
+     */
+    Attribute getAttribute();
+
+    /**
+     * The value without any {@link AttributeModifier}s applied.
+     */
+    double getBase();
+
+    /**
+     * Set the base value
+     */
+    void setBase(double value);
+
+    /**
+     * The effective value of the attribute, with {@link AttributeModifier}s applied.
+     */
+    double getFinal();
+
+    /**
+     * Has the given modifier been applied to this attribute?
+     */
+    boolean hasModifier(AttributeModifier modifier);
+
+    /**
+     * Has an {@link AttributeModifier} with the given UUID been applied to this attribute?
+     */
+    boolean hasModifier(UUID id);
+
+    /**
+     * Get the {@link AttributeModifier} with the given UUID, or null if no such modifier
+     * has been applied to this attribute.
+     */
+    AttributeModifier getModifier(UUID id);
+
+    /**
+     * Add the given modifier to the set modifying this attribute.
+     */
+    void addModifier(AttributeModifier modifier);
+
+    /**
+     * Remove the given modifier from the set modifying this attribute.
+     */
+    void removeModifier(AttributeModifier modifier);
+
+    /**
+     * Remove the {@link AttributeModifier} with the given ID from the set modifying this attribute.
+     */
+    void removeModifier(UUID id);
+}
diff --git a/src/main/java/org/bukkit/attributes/Attributes.java b/src/main/java/org/bukkit/attributes/Attributes.java
new file mode 100644
index 0000000..526c1bb
--- /dev/null
+++ b/src/main/java/org/bukkit/attributes/Attributes.java
@@ -0,0 +1,24 @@
+package org.bukkit.attributes;
+
+public class Attributes {
+    private Attributes() {}
+
+    public static class Generic {
+        private Generic() {}
+        public static final Attribute MAX_HEALTH = new Attribute("generic.maxHealth", 20d);
+        public static final Attribute FOLLOW_RANGE = new Attribute("generic.followRange", 32d);
+        public static final Attribute KNOCKBACK_RESISTANCE = new Attribute("generic.knockbackResistance", 0d);
+        public static final Attribute MOVEMENT_SPEED = new Attribute("generic.movementSpeed", 0.7d);
+        public static final Attribute ATTACK_DAMAGE = new Attribute("generic.attackDamage", 2d);
+    }
+
+    public static class Zombie {
+        private Zombie() {}
+        public static final Attribute SPAWN_REINFORCEMENTS = new Attribute("zombie.spawnReinforcements", 0d);
+    }
+
+    public static class Horse {
+        private Horse() {}
+        public static final Attribute JUMP_STRENGTH = new Attribute("horse.jumpStrength", 0.7D);
+    }
+}
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index 471bea8..621a985 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -5,6 +5,7 @@ import java.util.HashSet;
 import java.util.List;
 
 import org.bukkit.Location;
+import org.bukkit.attributes.AttributeOwner;
 import org.bukkit.block.Block;
 import org.bukkit.inventory.EntityEquipment;
 import org.bukkit.potion.PotionEffect;
@@ -14,7 +15,7 @@ import org.bukkit.projectiles.ProjectileSource;
 /**
  * Represents a living entity, such as a monster or player
  */
-public interface LivingEntity extends Entity, Damageable, ProjectileSource {
+public interface LivingEntity extends Entity, Damageable, ProjectileSource, AttributeOwner {
 
     /**
      * Gets the height of the living entity's eyes above its Location.
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index 0c11df2..169dc52 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -1,8 +1,11 @@
 package org.bukkit.inventory.meta;
 
+import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 
+import org.bukkit.attributes.Attribute;
+import org.bukkit.attributes.AttributeModifier;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.enchantments.Enchantment;
 
@@ -128,6 +131,30 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable {
 
     void setUnbreakable(boolean unbreakable);
 
+    boolean hasAttributeModifiers();
+
+    Collection<String> getModifiedAttributes();
+
+    boolean hasModifiedAttribute(String attribute);
+
+    boolean hasModifiedAttribute(Attribute attribute);
+
+    boolean hasAttributeModifier(String attribute, AttributeModifier modifier);
+
+    boolean hasAttributeModifier(Attribute attribute, AttributeModifier modifier);
+
+    Collection<AttributeModifier> getAttributeModifiers(String attribute);
+
+    Collection<AttributeModifier> getAttributeModifiers(Attribute attribute);
+
+    void addAttributeModifier(String attribute, AttributeModifier modifier);
+
+    void addAttributeModifier(Attribute attribute, AttributeModifier modifier);
+
+    void removeAttributeModifier(String attribute, AttributeModifier modifier);
+
+    void removeAttributeModifier(Attribute attribute, AttributeModifier modifier);
+
     @SuppressWarnings("javadoc")
     ItemMeta clone();
 }
-- 
1.9.0

