From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 10 Dec 2016 20:14:13 -0500
Subject: [PATCH] Server suspend API


diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -3,6 +3,8 @@ package org.bukkit;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.Serializable;
+import java.time.Duration;
+import java.time.Instant;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
@@ -11,6 +13,7 @@ import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
 import java.util.logging.Logger;
+import javax.annotation.Nullable;
 
 import org.bukkit.Warning.WarningState;
 import org.bukkit.boss.BarColor;
@@ -138,6 +141,12 @@ public interface Server extends PluginMessageRecipient, BukkitRuntime, tc.oc.min
     Map<UUID, Player> playersById();
 
     /**
+     * If the server is currently empty of players, return the {@link Instant}
+     * that the last player disconnected. If the server is not empty, return null.
+     */
+    @Nullable Instant emptySince();
+
+    /**
      * Get the maximum amount of players which can login to this server.
      *
      * @return the amount of players this server allows
@@ -330,6 +339,13 @@ public interface Server extends PluginMessageRecipient, BukkitRuntime, tc.oc.min
     public int getTicksPerMonsterSpawns();
 
     /**
+     * Time to wait before automatically suspending an empty server.
+     *
+     * @see #setSuspended(boolean)
+     */
+    @Nullable Duration getEmptyServerSuspendDelay();
+
+    /**
      * Gets a player object by the given username.
      * <p>
      * This method may not return objects for offline players.
@@ -1060,4 +1076,65 @@ public interface Server extends PluginMessageRecipient, BukkitRuntime, tc.oc.min
      *         false if it was added to the main thread queue
      */
     boolean runOnMainThread(Plugin plugin, boolean priority, Runnable task);
+
+    /**
+     * Suspend or resume the server.
+     *
+     * A suspended server does not tick or run scheduled tasks. However, it does
+     * execute console commands, and tasks submitted to {@link #postToMainThread},
+     * while remaining suspended.
+     *
+     * The server can only be suspended when no players are connected. The server
+     * will resume when a player successfully logs in. Failed logins due to bans
+     * or whitelisting do not cause the server to resume.
+     *
+     * @param suspend true to suspend the server, false to resume
+     *
+     * @return true if the suspended state of the server changed,
+     *         false if the state did not change, because the server was already
+     *         in the given state, or because the change is not currently possible.
+     *
+     * @see org.bukkit.event.server.ServerSuspendEvent
+     */
+    boolean setSuspended(boolean suspend);
+
+    /**
+     * Can the server be suspended right now?
+     *
+     * The server can be suspended only when it has no players connected,
+     * and is not in the process of shutting down. This method returns
+     * true if the server is already suspended.
+     *
+     * @see #setSuspended(boolean)
+     */
+    boolean canSuspend();
+
+    /**
+     * Is the server currently suspended?
+     *
+     * @see #setSuspended(boolean)
+     */
+    boolean isSuspended();
+
+    /**
+     * The {@link Instant} that the server entered the suspended state,
+     * or null if the server is not currently suspended.
+     *
+     * @see #setSuspended(boolean)
+     */
+    @Nullable Instant suspendedAt();
+
+    /**
+     * The number of times the server has been interrupted from suspension.
+     *
+     * If the server is not currently suspended, returns 0.
+     *
+     * Interruptions are caused by tasks posted to the main thread through
+     * {@link #postToMainThread}, console commands, and various internal events.
+     * Internal interruptions should be rare. If the server is being interrupted
+     * frequently, it is likely caused by a plugin.
+     *
+     * @see #setSuspended(boolean)
+     */
+    int interruptions();
 }
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -32,6 +32,7 @@ public class SimpleCommandMap implements CommandMap {
         register("bukkit", new ReloadCommand("reload"));
         register("bukkit", new PluginsCommand("plugins"));
         register("bukkit", new TimingsCommand("timings"));
+        register("bukkit", new SuspendCommand());
     }
 
     public void setFallbackCommands() {
diff --git a/src/main/java/org/bukkit/command/defaults/SuspendCommand.java b/src/main/java/org/bukkit/command/defaults/SuspendCommand.java
new file mode 100644
index 0000000..2a844e6
--- /dev/null
+++ b/src/main/java/org/bukkit/command/defaults/SuspendCommand.java
@@ -0,0 +1,53 @@
+package org.bukkit.command.defaults;
+
+import java.time.Duration;
+import java.time.Instant;
+import java.util.Collections;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import org.bukkit.Server;
+import org.bukkit.command.CommandSender;
+
+public class SuspendCommand extends BukkitCommand {
+
+    public SuspendCommand() {
+        super(
+            "suspend",
+            "Suspends the server, if no players are connected",
+            "/suspend [true|false]",
+            Collections.emptyList()
+        );
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if(!testPermission(sender)) return true;
+        final Server server = sender.getServer();
+        if(args.length == 0) {
+            final Instant at = server.suspendedAt();
+            if(at == null) {
+                sender.sendMessage(new ComponentBuilder("Server is not suspended").color(ChatColor.WHITE).create());
+            } else {
+                final Duration dur = Duration.between(at, Instant.now());
+                sender.sendMessage(new ComponentBuilder(
+                    "Server suspended for " + dur +
+                    " and interrupted " + server.interruptions() + " times"
+                ).color(ChatColor.WHITE).create());
+            }
+        } else if("true".equals(args[0])) {
+            if(server.isSuspended()) {
+                sender.sendMessage(new ComponentBuilder("Server is already suspended").color(ChatColor.RED).create());
+                return true;
+            }
+            if(!server.setSuspended(true)) {
+                sender.sendMessage(new ComponentBuilder("Server cannot be suspended while players are connected").color(ChatColor.RED).create());
+            }
+        } else if("false".equals(args[0])) {
+            if(!server.setSuspended(false)) {
+                sender.sendMessage(new ComponentBuilder("Server is not currently suspended").color(ChatColor.RED).create());
+            }
+        }
+        return true;
+    }
+}
diff --git a/src/main/java/org/bukkit/event/server/ServerSuspendEvent.java b/src/main/java/org/bukkit/event/server/ServerSuspendEvent.java
new file mode 100644
index 0000000..aac9118
--- /dev/null
+++ b/src/main/java/org/bukkit/event/server/ServerSuspendEvent.java
@@ -0,0 +1,16 @@
+package org.bukkit.event.server;
+
+import org.bukkit.Server;
+import org.bukkit.event.HandlerList;
+
+/**
+ * Fired when the server transitions to a suspended state, which can happen from an
+ * explicit call to {@link org.bukkit.Server#setSuspended(boolean)}, or automatically
+ * due to {@link Server#getEmptyServerSuspendDelay()}.
+ *
+ * The suspension happens entirely within the event. A call to {@link #yield()}
+ * will not return until the server has resumed.
+ */
+public class ServerSuspendEvent extends ServerEvent {
+    private static final HandlerList<ServerSuspendEvent> handlers = new HandlerList<>();
+}
