From 48ade1defe316946780b946bac7a5824ad38c875 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Wed, 16 Mar 2016 21:20:38 -0400
Subject: [PATCH] Math tools


diff --git a/src/main/java/org/bukkit/util/Cuboid.java b/src/main/java/org/bukkit/util/Cuboid.java
new file mode 100644
index 0000000..bee0e6d
--- /dev/null
+++ b/src/main/java/org/bukkit/util/Cuboid.java
@@ -0,0 +1,364 @@
+package org.bukkit.util;
+
+import java.util.Iterator;
+import java.util.Random;
+
+public class Cuboid {
+
+    private final ImVector min;
+    private final ImVector max;
+
+    private Cuboid(ImVector min, ImVector max) {
+        this.min = min;
+        this.max = max;
+    }
+
+    /**
+     * Create a minimal cuboid enclosing the given pair of points
+     *
+     * The relative order of the points on any axis does not matter.
+     */
+    public static Cuboid between(Vector a, Vector b) {
+        return new Cuboid(ImVector.getMinimum(a, b), ImVector.getMaximum(a, b));
+    }
+
+    /**
+     * Create a cuboid with given minimum and maximum corners.
+     *
+     * The coordinates are not sorted, so if any pair of components
+     * are out of order then the cuboid will have "negative" length
+     * on that axis.
+     *
+     * TODO: Reduce the allowed values to what is actually needed.
+     */
+    public static Cuboid fromMinAndMax(Vector min, Vector max) {
+        return new Cuboid(ImVector.copyOf(min), ImVector.copyOf(max));
+    }
+
+    public static Cuboid fromMinAndSize(Vector min, Vector size) {
+        return new Cuboid(ImVector.copyOf(min), ImVector.copyOf(min.plus(size)));
+    }
+
+    /**
+     * Create a minimal bounding box containing all of the given points
+     */
+    public static Cuboid enclosing(Vector... points) {
+        final Vector min = new Vector(Double.POSITIVE_INFINITY);
+        final Vector max = new Vector(Double.NEGATIVE_INFINITY);
+
+        for(Vector p : points) {
+            min.minimize(p);
+            max.maximize(p);
+        }
+
+        return between(min, max);
+    }
+
+    /**
+     * Return the cuboid that is unbounded in all directions
+     */
+    public static Cuboid unbounded() {
+        return UNBOUNDED;
+    }
+    private static final Cuboid UNBOUNDED = new Cuboid(ImVector.of(Double.NEGATIVE_INFINITY),
+                                                       ImVector.of(Double.POSITIVE_INFINITY));
+
+    /**
+     * Return the inverse of the {@link #unbounded()} cuboid
+     */
+    public static Cuboid empty() {
+        return EMPTY;
+    }
+    private static final Cuboid EMPTY = new Cuboid(ImVector.of(Double.POSITIVE_INFINITY),
+                                                   ImVector.of(Double.NEGATIVE_INFINITY));
+
+    /**
+     * Return the largest cuboid contained entirely within both of the given cuboids
+     */
+    public static Cuboid intersect(Cuboid a, Cuboid b) {
+        if(a.contains(b)) {
+            return b;
+        } else if(b.contains(a)) {
+            return a;
+        } else {
+            return new Cuboid(ImVector.getMaximum(a.min, b.min),
+                              ImVector.getMinimum(a.max, b.max));
+        }
+    }
+
+    /**
+     * Return the distance from the origin of the given ray to the point
+     * where it first intersects this cuboid. If the ray originates inside
+     * the cuboid, zero is returned.
+     *
+     * If the ray does not intersect the cuboid, but the line of the ray does
+     * intersect (behind the ray's origin), then a negative distance is returned.
+     *
+     * In any other case, NaN is returned.
+     */
+    public double intersectionDistance(Ray ray) {
+        // Find the distances to both boundaries on each axis
+        final ImVector d1 = min.minus(ray.origin()).over(ray.normal());
+        final ImVector d2 = max.minus(ray.origin()).over(ray.normal());
+
+        // Sort the distances into near and far for each axis
+        final ImVector near = ImVector.getMinimum(d1, d2);
+        final ImVector far = ImVector.getMaximum(d1, d2);
+
+        // Last near point enters the cuboid
+        // First far point exits the cuboid
+        final double enter = NumberConversions.max(near.getX(), near.getY(), near.getZ());
+        final double exit = NumberConversions.min(far.getX(), far.getY(), far.getZ());
+
+        // If the ray enters the cuboid before it exits, then it intersects
+        return enter <= exit ? enter : Double.NaN;
+    }
+
+    /**
+     * Return the point at which the given ray enters this cuboid,
+     * or null if the ray does not intersect the cuboid. If the ray
+     * originates inside the cuboid, the ray's origin point is returned.
+     */
+    public ImVector intersect(Ray ray) {
+        final double distance = intersectionDistance(ray);
+        if(distance == 0) {
+            return ray.origin();
+        } else if(distance > 0) {
+            return ray.origin().plus(ray.normal().times(distance));
+        } else {
+            return null;
+        }
+    }
+
+    /**
+     * Return the smallest cuboid containing both of the given cuboids
+     */
+    public static Cuboid union(Cuboid a, Cuboid b) {
+        if(a.contains(b)) {
+            return a;
+        } else if(b.contains(a)) {
+            return b;
+        } else {
+            return new Cuboid(ImVector.getMinimum(a.min, b.min),
+                              ImVector.getMaximum(a.max, b.max));
+        }
+    }
+
+    /**
+     * Return the smallest cuboid containing the given original cuboid, after subtracting the other given cuboid.
+     */
+    public static Cuboid complement(Cuboid original, Cuboid subtracted) {
+        // The booleans reflect if the subtracted set contains the
+        // original set on each axis. The final bounds for each axis
+        // are then the minimum of the two sets, if the other two axes
+        // are containing, otherwise the bounds of the original set.
+        boolean cx = subtracted.min.getX() < original.min.getX() && subtracted.max.getX() > original.max.getX();
+        boolean cy = subtracted.min.getY() < original.min.getY() && subtracted.max.getY() > original.max.getY();
+        boolean cz = subtracted.min.getZ() < original.min.getZ() && subtracted.max.getZ() > original.max.getZ();
+        return new Cuboid(ImVector.of(cy && cz ? Math.max(original.min.getX(), subtracted.min.getX()) : original.min.getX(),
+                                             cz && cx ? Math.max(original.min.getY(), subtracted.min.getY()) : original.min.getY(),
+                                             cx && cy ? Math.max(original.min.getZ(), subtracted.min.getZ()) : original.min.getZ()),
+                          ImVector.of(cy && cz ? Math.min(original.max.getX(), subtracted.max.getX()) : original.max.getX(),
+                                             cz && cx ? Math.min(original.max.getY(), subtracted.max.getY()) : original.max.getY(),
+                                             cx && cy ? Math.min(original.max.getZ(), subtracted.max.getZ()) : original.max.getZ()));
+    }
+
+    /**
+     * Construct a cuboid by translating this cuboid by the given offset
+     */
+    public Cuboid translate(Vector offset) {
+        return offset.isZero() ? this : new Cuboid(min.plus(offset), max.plus(offset));
+    }
+
+    /**
+     * Is this cuboid bounded on all axes?
+     */
+    public boolean isFinite() {
+        return this.isEmpty() ||
+               !(Double.isInfinite(this.min.getX()) || Double.isInfinite(this.max.getX()) ||
+                 Double.isInfinite(this.min.getY()) || Double.isInfinite(this.max.getY()) ||
+                 Double.isInfinite(this.min.getZ()) || Double.isInfinite(this.max.getZ()));
+    }
+
+    /**
+     * Does this cuboid contain a finite number of blocks?
+     *
+     * This is true if the cuboid is bounded on the horizontal axes.
+     */
+    public boolean isBlockFinite() {
+        return this.isEmpty() ||
+               !(Double.isInfinite(this.min.getX()) || Double.isInfinite(this.max.getX()) ||
+                 Double.isInfinite(this.min.getZ()) || Double.isInfinite(this.max.getZ()));
+    }
+
+    /**
+     * Does this cuboid have zero volume?
+     */
+    public boolean isEmpty() {
+        return min.getX() > max.getX() || min.getY() > max.getY() || min.getZ() > max.getZ();
+    }
+
+    /**
+     * Does this cuboid contain the given point?
+     */
+    public boolean contains(Vector point) {
+        return point.isInAABB(this.min, this.max);
+    }
+
+    /**
+     * Does this cuboid fully enclose the given cuboid?
+     */
+    public boolean contains(Cuboid cuboid) {
+        return this.contains(cuboid.min) && this.contains(cuboid.max);
+    }
+
+    /**
+     * Return the minimum corner of this cuboid
+     */
+    public ImVector minimum() {
+        return this.min;
+    }
+
+    /**
+     * Return the maximum corner of this cuboid
+     */
+    public ImVector maximum() {
+        return this.max;
+    }
+
+    /**
+     * Return the dimensions of this cuboid
+     */
+    public ImVector size() {
+        return max.minus(min);
+    }
+
+    /**
+     * Return the volume of this cuboid
+     */
+    public double volume() {
+        final ImVector size = size();
+        return size.getX() * size.getY() * size.getZ();
+    }
+
+    /**
+     * Return the center point of this cuboid
+     */
+    public ImVector center() {
+        return min.getMidpoint(max);
+    }
+
+    /**
+     * Return the eight corner points of this cuboid
+     */
+    public ImVector[] vertices() {
+        return new ImVector[] {
+            min,
+            ImVector.of(min.getX(), min.getY(), max.getZ()),
+            ImVector.of(min.getX(), max.getY(), min.getZ()),
+            ImVector.of(min.getX(), max.getY(), max.getZ()),
+            ImVector.of(max.getX(), min.getY(), min.getZ()),
+            ImVector.of(max.getX(), min.getY(), max.getZ()),
+            ImVector.of(max.getX(), max.getY(), min.getZ()),
+            max
+        };
+    }
+
+    /**
+     * Generate an evenly distributed random point inside this cuboid,
+     * using the given source of random numbers.
+     *
+     * {@link Random#nextDouble()} is used to choose the individual
+     * components, so the range of possible coordinates includes the
+     * lower bounds of the cuboid, but not the upper bounds.
+     */
+    public ImVector randomPointInside(Random random) {
+        final ImVector size = size();
+        return ImVector.of(min.getX() + size.getX() * random.nextDouble(),
+                                  min.getY() + size.getY() * random.nextDouble(),
+                                  min.getZ() + size.getZ() * random.nextDouble());
+    }
+
+    /**
+     * Return the lowest block with a center point inside this cuboid
+     */
+    public BlockVector minimumBlockInside() {
+        return new BlockVector((int) this.min.getX() + 0.5d,
+                               (int) Math.max(0, Math.min(255, this.min.getY() + 0.5d)),
+                               (int) this.min.getZ() + 0.5d);
+    }
+
+    /**
+     * Return the highest block with a center point inside this cuboid
+     */
+    public BlockVector maximumBlockInside() {
+        return new BlockVector((int) this.max.getX() - 0.5d,
+                               (int) Math.max(0, Math.min(255, this.max.getY() - 0.5d)),
+                               (int) this.max.getZ() - 0.5d);
+    }
+
+    /**
+     * Return the lowest block with a center point that is greater,
+     * on all axes, than any point in the cuboid.
+     *
+     * This block will have coordinates one greater than {@link #maximumBlockInside()}.
+     */
+    public BlockVector minimumBlockOutside() {
+        return new BlockVector((int) this.max.getX() + 0.5d,
+                               (int) Math.max(0, Math.min(256, this.max.getY() + 0.5d)),
+                               (int) this.max.getZ() + 0.5d);
+    }
+
+    /**
+     * Does the cuboid contain the center point of the given block?
+     */
+    public boolean containsBlock(BlockVector v) {
+        BlockVector min = this.minimumBlockInside();
+        BlockVector max = this.maximumBlockInside();
+        return min.getBlockX() <= v.getBlockX() && v.getBlockX() <= max.getBlockX() &&
+               min.getBlockY() <= v.getBlockY() && v.getBlockY() <= max.getBlockY() &&
+               min.getBlockZ() <= v.getBlockZ() && v.getBlockZ() <= max.getBlockZ();
+    }
+
+    public BlockVector blockSize() {
+        return this.minimumBlockOutside().subtract(this.minimumBlockInside()).toBlockVector();
+    }
+
+    public int blockVolume() {
+        BlockVector size = this.blockSize();
+        return (int) (size.getX() * size.getY() * size.getZ());
+    }
+
+    public BlockVector randomBlockInside(Random random) {
+        BlockVector min = this.minimumBlockInside();
+        BlockVector size = this.blockSize();
+        return new BlockVector(min.getX() + random.nextInt(size.getBlockX()),
+                               min.getY() + random.nextInt(size.getBlockY()),
+                               min.getZ() + random.nextInt(size.getBlockZ()));
+    }
+
+    /**
+     * Iterate over all the block locations within
+     * these bounds, in Z-major order.
+     */
+    public Iterator<BlockVector> blockPositionIterator() {
+        if(!this.isBlockFinite()) {
+            throw new UnsupportedOperationException("Cannot get all blocks from an infinite region");
+        }
+        return new CuboidBlockIterator(minimumBlockInside(), minimumBlockOutside());
+    }
+
+    public Iterable<BlockVector> blockPositions() {
+        return new Iterable<BlockVector>() {
+            @Override
+            public Iterator<BlockVector> iterator() {
+                return blockPositionIterator();
+            }
+        };
+    }
+
+    @Override
+    public String toString() {
+        return getClass().getSimpleName() + "{min=[" + min.toString() + "],max=[" + max.toString() + "]}";
+    }
+}
diff --git a/src/main/java/org/bukkit/util/CuboidBlockIterator.java b/src/main/java/org/bukkit/util/CuboidBlockIterator.java
new file mode 100644
index 0000000..35a0559
--- /dev/null
+++ b/src/main/java/org/bukkit/util/CuboidBlockIterator.java
@@ -0,0 +1,75 @@
+package org.bukkit.util;
+
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+
+import org.bukkit.util.BlockVector;
+import org.bukkit.util.ImBlockVector;
+import org.bukkit.util.Vector;
+
+/**
+ * Hybrid {@link BlockVector} and {@link Iterator} that iterates all block positions
+ * in a given cuboid volume. The object changes its own state while iterating, and
+ * returns itself from {@link #next()}. In this way, it avoids creating any objects
+ * while iterating. Attempts to mutate the object in any way besides the next() method
+ * will be punished severely.
+ *
+ * The boundaries given to the constructor must be in correct order, or the cuboid will
+ * be considered empty.
+ */
+public class CuboidBlockIterator extends ImBlockVector implements Iterator<BlockVector> {
+
+    private final int xMin, yMin;
+    private final int xMax, yMax, zMax;
+    private int xNext, yNext, zNext;
+    private boolean hasNext;
+
+    public CuboidBlockIterator(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax) {
+        super(xMin, yMin, zMin);
+        this.xNext = this.xMin = xMin;
+        this.yNext = this.yMin = yMin;
+        this.zNext = zMin;
+        this.xMax = xMax;
+        this.yMax = yMax;
+        this.zMax = zMax;
+        this.hasNext = xMin < xMax && yMin < yMax && zMin < zMax;
+    }
+
+    public CuboidBlockIterator(Vector min, Vector max) {
+        this(min.getBlockX(), min.getBlockY(), min.getBlockZ(),
+             max.getBlockX(), max.getBlockY(), max.getBlockZ());
+    }
+
+    @Override
+    public boolean hasNext() {
+        return hasNext;
+    }
+
+    @Override
+    public ImBlockVector next() {
+        if(!hasNext) {
+            throw new NoSuchElementException();
+        }
+
+        x = xNext;
+        y = yNext;
+        z = zNext;
+
+        if(++xNext >= xMax) {
+            xNext = xMin;
+            if(++yNext >= yMax) {
+                yNext = yMin;
+                if(++zNext >= zMax) {
+                    hasNext = false;
+                }
+            }
+        }
+
+        return this;
+    }
+
+    @Override
+    public void remove() {
+        throw new UnsupportedOperationException();
+    }
+}
diff --git a/src/main/java/org/bukkit/util/ImBlockVector.java b/src/main/java/org/bukkit/util/ImBlockVector.java
new file mode 100644
index 0000000..9d8a1d0
--- /dev/null
+++ b/src/main/java/org/bukkit/util/ImBlockVector.java
@@ -0,0 +1,119 @@
+package org.bukkit.util;
+
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockState;
+
+/**
+ * Override all mutating methods of {@link BlockVector} and throw an {@link UnsupportedOperationException}.
+ * Subclasses can still access the component fields directly since they have protected access.
+ */
+public class ImBlockVector extends BlockVector {
+
+    public ImBlockVector() {
+    }
+
+    public ImBlockVector(Vector vec) {
+        super(vec);
+    }
+
+    public ImBlockVector(int x, int y, int z) {
+        super(x, y, z);
+    }
+
+    public ImBlockVector(double x, double y, double z) {
+        super(x, y, z);
+    }
+
+    public ImBlockVector(float x, float y, float z) {
+        super(x, y, z);
+    }
+    
+    public boolean isBlockCorner() {
+        return getX() == getBlockX() &&
+               getY() == getBlockY() &&
+               getZ() == getBlockZ();
+    }
+
+    public boolean isBlockCenter() {
+        return getX() == getBlockX() + 0.5 &&
+               getY() == getBlockY() + 0.5 &&
+               getZ() == getBlockZ() + 0.5;
+    }
+
+    public static ImBlockVector cornerOf(int x, int y, int z) {
+        return new Corner(x, y, z);
+    }
+
+    public static ImBlockVector cornerOf(Vector v) {
+        return v instanceof Corner ? (Corner) v
+                                   : new Corner(v.getBlockX(), v.getBlockY(), v.getBlockZ());
+    }
+
+    public static ImBlockVector cornerOf(Block block) {
+        return new Corner(block.getX(), block.getY(), block.getZ());
+    }
+
+    public static ImBlockVector cornerOf(BlockState block) {
+        return new Corner(block.getX(), block.getY(), block.getZ());
+    }
+
+    public static ImBlockVector centerOf(int x, int y, int z) {
+        return new Center(x, y, z);
+    }
+
+    public static ImBlockVector centerOf(Vector v) {
+        return v instanceof Center ? (Center) v
+                                   : new Center(v.getBlockX(), v.getBlockY(), v.getBlockZ());
+    }
+
+    public static ImBlockVector centerOf(Block block) {
+        return new Center(block.getX(), block.getY(), block.getZ());
+    }
+
+    public static ImBlockVector centerOf(BlockState block) {
+        return new Center(block.getX(), block.getY(), block.getZ());
+    }
+
+    private static class Corner extends ImBlockVector {
+        public Corner(int x, int y, int z) {
+            super((double) x, (double) y, (double) z);
+        }
+
+        @Override public boolean isBlockCorner() { return true; }
+        @Override public boolean isBlockCenter() { return false; }
+    }
+
+    private static class Center extends ImBlockVector {
+        Center(int x, int y, int z) {
+            super(x + 0.5, y + 0.5, z + 0.5);
+        }
+
+        @Override public boolean isBlockCorner() { return false; }
+        @Override public boolean isBlockCenter() { return true; }
+    }
+
+    protected RuntimeException ex() {
+        return new UnsupportedOperationException("This object is immutable");
+    }
+
+    @Override public Vector add(Vector vec) { throw ex(); }
+    @Override public Vector subtract(Vector vec) { throw ex(); }
+    @Override public Vector multiply(Vector vec) { throw ex(); }
+    @Override public Vector divide(Vector vec) { throw ex(); }
+    @Override public Vector multiply(int m) { throw ex(); }
+    @Override public Vector multiply(double m) { throw ex(); }
+    @Override public Vector multiply(float m) { throw ex(); }
+    @Override public Vector normalize() { throw ex(); }
+    @Override public Vector zero() { throw ex(); }
+    @Override public Vector crossProduct(Vector o) { throw ex(); }
+    @Override public Vector setX(int x) { throw ex(); }
+    @Override public Vector setX(double x) { throw ex(); }
+    @Override public Vector setX(float x) { throw ex(); }
+    @Override public Vector setY(int y) { throw ex(); }
+    @Override public Vector setY(double y) { throw ex(); }
+    @Override public Vector setY(float y) { throw ex(); }
+    @Override public Vector setZ(double z) { throw ex(); }
+    @Override public Vector setZ(int z) { throw ex(); }
+    @Override public Vector setZ(float z) { throw ex(); }
+    @Override public Vector copy(Vector vec) { throw ex(); }
+}
diff --git a/src/main/java/org/bukkit/util/ImVector.java b/src/main/java/org/bukkit/util/ImVector.java
new file mode 100644
index 0000000..81cb902
--- /dev/null
+++ b/src/main/java/org/bukkit/util/ImVector.java
@@ -0,0 +1,178 @@
+package org.bukkit.util;
+
+/**
+ * An immutable {@link Vector}
+ *
+ * All the mutating methods inherited from {@link Vector}
+ * will throw an exception.
+ */
+public class ImVector extends Vector {
+
+    private static final ImVector ZERO = new ImVector(0, 0, 0);
+
+    private ImVector(double x, double y, double z) {
+        super(x, y, z);
+    }
+
+    public static ImVector of(double x, double y, double z) {
+        return x == 0 && y == 0 && z == 0 ? ZERO : new ImVector(x, y, z);
+    }
+
+    public static ImVector of(double n) {
+        return n == 0 ? ZERO : new ImVector(n, n, n);
+    }
+
+    public static ImVector ofZero() {
+        return ZERO;
+    }
+
+    public static ImVector copyOf(Vector v) {
+        return v instanceof ImVector ? (ImVector) v
+                                     : new ImVector(v.getX(), v.getY(), v.getZ());
+    }
+
+    public static ImVector getMinimum(Vector a, Vector b) {
+        return of(Math.min(a.getX(), b.getX()),
+                  Math.min(a.getY(), b.getY()),
+                  Math.min(a.getZ(), b.getZ()));
+    }
+
+    public static ImVector getMaximum(Vector a, Vector b) {
+        return of(Math.max(a.getX(), b.getX()),
+                  Math.max(a.getY(), b.getY()),
+                  Math.max(a.getZ(), b.getZ()));
+    }
+
+    public static ImVector min(Vector... a) {
+        double x, y, z;
+        x = y = z = Double.POSITIVE_INFINITY;
+        for(Vector v : a) {
+            x = Math.min(x, v.getX());
+            y = Math.min(y, v.getY());
+            z = Math.min(z, v.getZ());
+        }
+        return of(x, y, z);
+    }
+
+    public static ImVector max(Vector... a) {
+        double x, y, z;
+        x = y = z = Double.NEGATIVE_INFINITY;
+        for(Vector v : a) {
+            x = Math.max(x, v.getX());
+            y = Math.max(y, v.getY());
+            z = Math.max(z, v.getZ());
+        }
+        return of(x, y, z);
+    }
+
+    public static ImVector interpolate(Vector a, Vector b, double n) {
+        return of(NumberConversions.interpolate(a.getX(), b.getX(), n),
+                  NumberConversions.interpolate(a.getY(), b.getY(), n),
+                  NumberConversions.interpolate(a.getZ(), b.getZ(), n));
+    }
+
+    @Override
+    public ImVector plus(Vector v) {
+        return of(x + v.getX(), y + v.getY(), z + v.getZ());
+    }
+
+    @Override
+    public ImVector plus(double x, double y, double z) {
+        return of(this.x + x, this.y + y, this.z + z);
+    }
+
+    @Override
+    public ImVector minus(Vector v) {
+        return of(x - v.getX(), y - v.getY(), z - v.getZ());
+    }
+
+    @Override
+    public ImVector minus(double x, double y, double z) {
+        return of(this.x - x, this.y - y, this.z - z);
+    }
+
+    @Override
+    public ImVector times(double n) {
+        if(n == 0) {
+            return ZERO;
+        } else if(n == 1) {
+            return this;
+        } else {
+            return of(n * x, n * y, n * z);
+        }
+    }
+
+    @Override
+    public ImVector times(Vector v) {
+        return of(x * v.getX(), y * v.getY(), z * v.getZ());
+    }
+
+    @Override
+    public ImVector over(double n) {
+        if(Double.isInfinite(n)) {
+            return ZERO;
+        } else if(n == 1) {
+            return this;
+        } else {
+            return of(x / n, y / n, z / n);
+        }
+    }
+
+    @Override
+    public ImVector over(Vector v) {
+        return of(x / v.getX(), y / v.getY(), z / v.getZ());
+    }
+
+    @Override
+    public ImVector unit() {
+        return over(length());
+    }
+
+    @Override
+    public ImVector getCrossProduct(Vector v) {
+        return of(this.y * v.z - v.y * this.z,
+                  this.z * v.x - v.z * this.x,
+                  this.x * v.y - v.x * this.y);
+    }
+
+    @Override
+    public ImVector getMidpoint(Vector v) {
+        return of((x + v.getX()) / 2,
+                  (y + v.getY()) / 2,
+                  (z + v.getZ()) / 2);
+    }
+
+    private UnsupportedOperationException ex() {
+        return new UnsupportedOperationException("object is immutable");
+    }
+
+    @Override public Vector add(Vector vec) { throw ex(); }
+    @Override public Vector add(double x, double y, double z) { throw ex(); }
+    @Override public Vector subtract(Vector vec) { throw ex(); }
+    @Override public Vector subtract(double x, double y, double z) { throw ex(); }
+    @Override public Vector multiply(Vector vec) { throw ex(); }
+    @Override public Vector divide(Vector vec) { throw ex(); }
+    @Override public Vector midpoint(Vector other) { throw ex(); }
+    @Override public Vector multiply(int m) { throw ex(); }
+    @Override public Vector multiply(double m) { throw ex(); }
+    @Override public Vector multiply(float m) { throw ex(); }
+    @Override public Vector crossProduct(Vector o) { throw ex(); }
+    @Override public Vector normalize() { throw ex(); }
+    @Override public Vector zero() { throw ex(); }
+    @Override public Vector setX(int x) { throw ex(); }
+    @Override public Vector setX(double x) { throw ex(); }
+    @Override public Vector setX(float x) { throw ex(); }
+    @Override public Vector setY(int y) { throw ex(); }
+    @Override public Vector setY(double y) { throw ex(); }
+    @Override public Vector setY(float y) { throw ex(); }
+    @Override public Vector setZ(int z) { throw ex(); }
+    @Override public Vector setZ(double z) { throw ex(); }
+    @Override public Vector setZ(float z) { throw ex(); }
+    @Override public Vector set(double x, double y, double z) { throw ex(); }
+    @Override public Vector set(Vector value) { throw ex(); }
+    @Override public Vector setZero() { throw ex(); }
+    @Override public Vector minimize(Vector v) { throw ex(); }
+    @Override public Vector maximize(Vector v) { throw ex(); }
+    @Override public Vector clamp(Vector min, Vector max) { throw ex(); }
+    @Override public Vector clamp(Cuboid bounds) { throw ex(); }
+}
diff --git a/src/main/java/org/bukkit/util/NumberConversions.java b/src/main/java/org/bukkit/util/NumberConversions.java
index e6af9ec..c144b49 100644
--- a/src/main/java/org/bukkit/util/NumberConversions.java
+++ b/src/main/java/org/bukkit/util/NumberConversions.java
@@ -121,4 +121,24 @@ public final class NumberConversions {
             throw new IllegalArgumentException(message);
         }
     }
+
+    public static double interpolate(double a, double b, double n) {
+        return (1D - n) * a + n * b;
+    }
+
+    public static double min(double... a) {
+        double n = Double.POSITIVE_INFINITY;
+        for(int i = 0; i < a.length; i++) {
+            n = Math.min(n, a[i]);
+        }
+        return n;
+    }
+
+    public static double max(double... a) {
+        double n = Double.NEGATIVE_INFINITY;
+        for(int i = 0; i < a.length; i++) {
+            n = Math.max(n, a[i]);
+        }
+        return n;
+    }
 }
diff --git a/src/main/java/org/bukkit/util/Ray.java b/src/main/java/org/bukkit/util/Ray.java
new file mode 100644
index 0000000..be98068
--- /dev/null
+++ b/src/main/java/org/bukkit/util/Ray.java
@@ -0,0 +1,42 @@
+package org.bukkit.util;
+
+import com.google.common.base.Preconditions;
+import org.bukkit.Location;
+
+public class Ray {
+
+    private final ImVector origin;
+    private final ImVector normal;
+
+    private Ray(ImVector origin, ImVector normal) {
+        this.origin = origin;
+        this.normal = normal;
+    }
+
+    public static Ray fromOriginAndNormal(Vector origin, Vector normal) {
+        Preconditions.checkArgument(!normal.isZero(), "Ray normal must have non-zero length");
+        return new Ray(ImVector.copyOf(origin), ImVector.copyOf(normal.unit()));
+    }
+
+    public static Ray fromOriginAndTarget(Vector origin, Vector target) {
+        final ImVector normal = ImVector.copyOf(target.minus(origin));
+        Preconditions.checkArgument(!normal.isZero(), "Ray target must be different from origin");
+        return new Ray(ImVector.copyOf(origin), normal.unit());
+    }
+
+    public static Ray fromLocation(Location location) {
+        return new Ray(ImVector.copyOf(location), ImVector.copyOf(location.getDirection()));
+    }
+
+    public ImVector origin() {
+        return origin;
+    }
+
+    public ImVector normal() {
+        return normal;
+    }
+
+    public ImVector atDistance(double distance) {
+        return origin.plus(normal.times(distance));
+    }
+}
diff --git a/src/main/java/org/bukkit/util/Vector.java b/src/main/java/org/bukkit/util/Vector.java
index 00e6879..21ef7cd 100644
--- a/src/main/java/org/bukkit/util/Vector.java
+++ b/src/main/java/org/bukkit/util/Vector.java
@@ -3,6 +3,8 @@ package org.bukkit.util;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Random;
+
+import com.google.common.base.Preconditions;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.block.BlockPosition;
@@ -67,6 +69,13 @@ public class Vector implements Cloneable, ConfigurationSerializable, BlockPositi
     }
 
     /**
+     * Construct the vector with all components set to the given value
+     */
+    public Vector(double n) {
+        this(n, n, n);
+    }
+
+    /**
      * Construct the vector with provided float components.
      *
      * @param x X component
@@ -79,6 +88,13 @@ public class Vector implements Cloneable, ConfigurationSerializable, BlockPositi
         this.z = z;
     }
 
+    /**
+     * Construct a copy of the given Vector
+     */
+    public Vector(Vector that) {
+        this(that.getX(), that.getY(), that.getZ());
+    }
+
     @Override
     public boolean isBlockZero() {
         return x == 0d && y == 0d && z == 0d;
@@ -406,6 +422,10 @@ public class Vector implements Cloneable, ConfigurationSerializable, BlockPositi
         return x >= min.x && x <= max.x && y >= min.y && y <= max.y && z >= min.z && z <= max.z;
     }
 
+    public boolean isInAABB(Cuboid bounds) {
+        return isInAABB(bounds.minimum(), bounds.maximum());
+    }
+
     /**
      * Returns whether this vector is within a sphere.
      *
@@ -573,13 +593,25 @@ public class Vector implements Cloneable, ConfigurationSerializable, BlockPositi
         return this;
     }
 
-    /**
-     * Checks to see if two objects are equal.
-     * <p>
-     * Only two Vectors can ever return true. This method uses a fuzzy match
-     * to account for floating point errors. The epsilon can be retrieved
-     * with epsilon.
-     */
+    public Vector set(double x, double y, double z) {
+        this.x = x;
+        this.y = y;
+        this.z = z;
+        return this;
+    }
+
+    public Vector set(Vector value) {
+        return set(value.getX(), value.getY(), value.getZ());
+    }
+
+    public Vector setZero() {
+        return set(0, 0, 0);
+    }
+
+    public boolean isZero() {
+        return x == 0 && y == 0 && z == 0;
+    }
+
     @Override
     public boolean equals(Object obj) {
         if (!(obj instanceof Vector)) {
@@ -587,8 +619,7 @@ public class Vector implements Cloneable, ConfigurationSerializable, BlockPositi
         }
 
         Vector other = (Vector) obj;
-
-        return Math.abs(x - other.x) < epsilon && Math.abs(y - other.y) < epsilon && Math.abs(z - other.z) < epsilon && (this.getClass().equals(obj.getClass()));
+        return x == other.getX() && y == other.getY() && z == other.getZ();
     }
 
     /**
@@ -727,4 +758,125 @@ public class Vector implements Cloneable, ConfigurationSerializable, BlockPositi
 
         return new Vector(x, y, z);
     }
+
+    // Construction
+
+    public static Vector interpolate(Vector a, Vector b, double n) {
+        return new Vector(NumberConversions.interpolate(a.getX(), b.getX(), n),
+                          NumberConversions.interpolate(a.getY(), b.getY(), n),
+                          NumberConversions.interpolate(a.getZ(), b.getZ(), n));
+    }
+
+
+    // Comparison
+
+    public boolean isLess(Vector v) {
+        return x < v.getX() && y < v.getY() && z < v.getZ();
+    }
+
+    public boolean isLessOrEqual(Vector v) {
+        return x <= v.getX() && y <= v.getY() && z <= v.getZ();
+    }
+
+    public boolean isGreater(Vector v) {
+        return x > v.getX() && y > v.getY() && z > v.getZ();
+    }
+
+    public boolean isGreaterOrEqual(Vector v) {
+        return x >= v.getX() && y >= v.getY() && z >= v.getZ();
+    }
+
+
+    // Limiting
+
+    public Vector minimize(Vector v) {
+        if(x > v.getX()) x = v.getX();
+        if(y > v.getY()) y = v.getY();
+        if(z > v.getZ()) z = v.getZ();
+        return this;
+    }
+
+    public Vector maximize(Vector v) {
+        if(x < v.getX()) x = v.getX();
+        if(y < v.getY()) y = v.getY();
+        if(z < v.getZ()) z = v.getZ();
+        return this;
+    }
+
+    public Vector clamp(Vector min, Vector max) {
+        Preconditions.checkArgument(min.isLessOrEqual(max));
+        maximize(min);
+        minimize(max);
+        return this;
+    }
+
+    public Vector clamp(Cuboid bounds) {
+        return clamp(bounds.minimum(), bounds.maximum());
+    }
+
+
+    // Non-mutating operations
+
+    /**
+     * Equivalent to {@link #add(Vector)}, but returns a new vector instead of modifying this one
+     */
+    public Vector plus(Vector v) {
+        return new Vector(x + v.getX(), y + v.getY(), z + v.getZ());
+    }
+
+    /**
+     * Equivalent to {@link #add(double, double, double)}, but returns a new vector instead of modifying this one
+     */
+    public Vector plus(double x, double y, double z) {
+        return new Vector(this.x + x, this.y + y, this.z + z);
+    }
+
+    /**
+     * Equivalent to {@link #subtract(Vector)}, but returns a new vector instead of modifying this one
+     */
+    public Vector minus(Vector v) {
+        return new Vector(x - v.getX(), y - v.getY(), z - v.getZ());
+    }
+
+    /**
+     * Equivalent to {@link #subtract(double, double, double)}, but returns a new vector instead of modifying this one
+     */
+    public Vector minus(double x, double y, double z) {
+        return new Vector(this.x - x, this.y - y, this.z - z);
+    }
+
+    /**
+     * Equivalent to {@link #multiply(double)}, but returns a new vector instead of modifying this one
+     */
+    public Vector times(double n) {
+        return new Vector(x * n, y * n, z * n);
+    }
+
+    /**
+     * Equivalent to {@link #multiply(Vector)}, but returns a new vector instead of modifying this one
+     */
+    public Vector times(Vector v) {
+        return new Vector(x * v.getX(), y * v.getY(), z * v.getZ());
+    }
+
+    /**
+     * Equivalent to {@link #times(double)} with 1 / n
+     */
+    public Vector over(double n) {
+        return new Vector(x / n, y / n, z / n);
+    }
+
+    /**
+     * Equivalent to {@link #divide(Vector)}, but returns a new vector instead of modifying this one
+     */
+    public Vector over(Vector v) {
+        return new Vector(x / v.getX(), y / v.getY(), z / v.getZ());
+    }
+
+    /**
+     * Equivalent to {@link #normalize()}, but returns a new vector instead of modifying this one
+     */
+    public Vector unit() {
+        return over(length());
+    }
 }
-- 
1.9.0

