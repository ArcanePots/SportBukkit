From 74f8aaf15fdc532be3ac47a6d7367ff8429960aa Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Tue, 19 May 2015 01:40:42 -0400
Subject: [PATCH] Support unbreakable items


diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 8b18e1f..44ad571 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -211,12 +211,14 @@ class CraftMetaItem implements ItemMeta, Repairable {
     static final ItemMetaKey ATTRIBUTES_UUID_LOW = new ItemMetaKey("UUIDLeast");
     @Specific(Specific.To.NBT)
     static final ItemMetaKey HIDEFLAGS = new ItemMetaKey("HideFlags", "ItemFlags");
+    static final ItemMetaKey UNBREAKABLE = new ItemMetaKey("Unbreakable", "unbreakable");
 
     private String displayName;
     private List<String> lore;
     private Map<Enchantment, Integer> enchantments;
     private int repairCost;
     private int hideFlag;
+    private boolean unbreakable;
 
     private static final Set<String> HANDLED_TAGS = Sets.newHashSet();
 
@@ -239,6 +241,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
         this.repairCost = meta.repairCost;
         this.hideFlag = meta.hideFlag;
+        this.unbreakable = meta.unbreakable;
         this.unhandledTags.putAll(meta.unhandledTags);
     }
 
@@ -317,6 +320,8 @@ class CraftMetaItem implements ItemMeta, Repairable {
             unhandledTags.put(ATTRIBUTES.NBT, save);
         }
 
+        unbreakable = tag.getBoolean(UNBREAKABLE.NBT);
+
         Set<String> keys = tag.c();
         for (String key : keys) {
             if (!getHandledTags().contains(key)) {
@@ -391,6 +396,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
                 Logger.getLogger(CraftMetaItem.class.getName()).log(Level.SEVERE, null, ex);
             }
         }
+        unbreakable = SerializableMeta.getBoolean(map, UNBREAKABLE.BUKKIT);
     }
 
     static Map<Enchantment, Integer> buildEnchantments(Map<String, Object> map, ItemMetaKey key) {
@@ -431,6 +437,10 @@ class CraftMetaItem implements ItemMeta, Repairable {
             itemTag.setInt(REPAIR.NBT, repairCost);
         }
 
+        if(unbreakable) {
+            itemTag.setBoolean(UNBREAKABLE.NBT, true);
+        }
+
         for (Map.Entry<String, NBTBase> e : unhandledTags.entrySet()) {
             itemTag.set(e.getKey(), e.getValue());
         }
@@ -485,7 +495,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
     @Overridden
     boolean isEmpty() {
-        return !(hasDisplayName() || hasEnchants() || hasLore() || hasRepairCost() || !unhandledTags.isEmpty() || hideFlag != 0);
+        return !(hasDisplayName() || hasEnchants() || hasLore() || hasRepairCost() || unbreakable || !unhandledTags.isEmpty() || hideFlag != 0);
     }
 
     public String getDisplayName() {
@@ -611,6 +621,16 @@ class CraftMetaItem implements ItemMeta, Repairable {
     }
 
     @Override
+    public boolean isUnbreakable() {
+        return unbreakable;
+    }
+
+    @Override
+    public void setUnbreakable(boolean unbreakable) {
+        this.unbreakable = unbreakable;
+    }
+
+    @Override
     public final boolean equals(Object object) {
         if (object == null) {
             return false;
@@ -635,6 +655,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
                 && (this.hasEnchants() ? that.hasEnchants() && this.enchantments.equals(that.enchantments) : !that.hasEnchants())
                 && (this.hasLore() ? that.hasLore() && this.lore.equals(that.lore) : !that.hasLore())
                 && (this.hasRepairCost() ? that.hasRepairCost() && this.repairCost == that.repairCost : !that.hasRepairCost())
+                && this.unbreakable == that.unbreakable
                 && (this.unhandledTags.equals(that.unhandledTags))
                 && (this.hideFlag == that.hideFlag);
     }
@@ -661,6 +682,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
         hash = 61 * hash + (hasLore() ? this.lore.hashCode() : 0);
         hash = 61 * hash + (hasEnchants() ? this.enchantments.hashCode() : 0);
         hash = 61 * hash + (hasRepairCost() ? this.repairCost : 0);
+        hash = 61 * hash + (unbreakable ? 1 : 0);
         hash = 61 * hash + unhandledTags.hashCode();
         hash = 61 * hash + hideFlag;
         return hash;
@@ -735,6 +757,10 @@ class CraftMetaItem implements ItemMeta, Repairable {
             }
         }
 
+        if(unbreakable) {
+            builder.put(UNBREAKABLE.BUKKIT, true);
+        }
+
         return builder;
     }
 
@@ -801,6 +827,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
                         DISPLAY.NBT,
                         REPAIR.NBT,
                         ENCHANTMENTS.NBT,
+                        UNBREAKABLE.NBT,
                         CraftMetaMap.MAP_SCALING.NBT,
                         CraftMetaPotion.POTION_EFFECTS.NBT,
                         CraftMetaSkull.SKULL_OWNER.NBT,
-- 
1.9.0

