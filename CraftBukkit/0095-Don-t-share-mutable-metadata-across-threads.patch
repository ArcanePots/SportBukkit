From 9e8b4b270ec5c7b80c3f413f618f41e269c0852a Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Fri, 20 Mar 2015 01:21:22 -0400
Subject: [PATCH] Don't share mutable metadata across threads


diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index bcfe8fe..a1f6a1c 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -197,6 +197,24 @@ public class DataWatcher {
         return arraylist;
     }
 
+    // SportBukkit start - Make deep copies of the WatchableObjects so they are not shared across threads
+    public static void deepCopy(List<WatchableObject> watchableObjects) {
+        if(watchableObjects == null) return;
+
+        for(int j = 0; j < watchableObjects.size(); j++) {
+            WatchableObject original = watchableObjects.get(j);
+            Object obj = original.b();
+            if(obj instanceof ItemStack) {
+                // All the watchable types are immutable except ItemStack, which we have to clone
+                obj = ((ItemStack) obj).cloneItemStack();
+            }
+            WatchableObject copy = new WatchableObject(original.c(), original.a(), obj);
+            copy.a(original.d());
+            watchableObjects.set(j, copy);
+        }
+    }
+    // SportBukkit end
+
     private static void a(PacketDataSerializer packetdataserializer, DataWatcher.WatchableObject datawatcher_watchableobject) throws IOException {
         int i = (datawatcher_watchableobject.c() << 5 | datawatcher_watchableobject.a() & 31) & 255;
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
index 686af1c..cbe52e7 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
@@ -19,7 +19,7 @@ public class PacketPlayOutEntityMetadata implements Packet<PacketListenerPlayOut
         } else {
             this.b = datawatcher.b();
         }
-
+        DataWatcher.deepCopy(this.b); // SportBukkit - send unshared copy of metadata
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java b/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
index 293633d..0ed13fc 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
@@ -33,6 +33,11 @@ public class PacketPlayOutNamedEntitySpawn implements Packet<PacketListenerPlayO
 
         this.h = itemstack == null ? 0 : Item.getId(itemstack.getItem());
         this.i = entityhuman.getDataWatcher();
+
+        // SportBukkit start - send unshared copy of metadata
+        this.j = this.i.c();
+        DataWatcher.deepCopy(this.j);
+        // SportBukkit end
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
@@ -56,7 +61,11 @@ public class PacketPlayOutNamedEntitySpawn implements Packet<PacketListenerPlayO
         packetdataserializer.writeByte(this.f);
         packetdataserializer.writeByte(this.g);
         packetdataserializer.writeShort(this.h);
-        this.i.a(packetdataserializer);
+
+        // SportBukkit start - send unshared copy of metadata
+        // this.i.a(packetdataserializer);
+        DataWatcher.a(this.j, packetdataserializer);
+        // SportBukkit end
     }
 
     public void a(PacketListenerPlayOut packetlistenerplayout) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
index 9d19be5..bd0030d 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
@@ -65,6 +65,11 @@ public class PacketPlayOutSpawnEntityLiving implements Packet<PacketListenerPlay
         this.g = (int) (d2 * 8000.0D);
         this.h = (int) (d3 * 8000.0D);
         this.l = entityliving.getDataWatcher();
+
+        // SportBukkit start - send unshared copy of metadata
+        this.m = this.l.c();
+        DataWatcher.deepCopy(this.m);
+        // SportBukkit end
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
@@ -94,7 +99,11 @@ public class PacketPlayOutSpawnEntityLiving implements Packet<PacketListenerPlay
         packetdataserializer.writeShort(this.f);
         packetdataserializer.writeShort(this.g);
         packetdataserializer.writeShort(this.h);
-        this.l.a(packetdataserializer);
+
+        // SportBukkit start - send unshared copy of metadata
+        // this.l.a(packetdataserializer);
+        DataWatcher.a(this.m, packetdataserializer);
+        // SportBukkit end
     }
 
     public void a(PacketListenerPlayOut packetlistenerplayout) {
-- 
1.9.0

