From fc69570f0691340ce5747a0e19318abb22568adb Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Tue, 19 May 2015 01:40:42 -0400
Subject: [PATCH] Support unbreakable items


diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 4681262..6e43be0 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -201,12 +201,14 @@ class CraftMetaItem implements ItemMeta, Repairable {
     static final ItemMetaKey ATTRIBUTES_UUID_HIGH = new ItemMetaKey("UUIDMost");
     @Specific(Specific.To.NBT)
     static final ItemMetaKey ATTRIBUTES_UUID_LOW = new ItemMetaKey("UUIDLeast");
+    static final ItemMetaKey UNBREAKABLE = new ItemMetaKey("Unbreakable", "unbreakable");
 
     private String displayName;
     private List<String> lore;
     private Map<Enchantment, Integer> enchantments;
     private int repairCost;
     private final NBTTagList attributes;
+    private boolean unbreakable;
 
     private static final Set<String> HANDLED_TAGS = Sets.newHashSet();
 
@@ -230,6 +232,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
         this.repairCost = meta.repairCost;
         this.attributes = meta.attributes;
+        this.unbreakable = meta.unbreakable;
         this.unhandledTags.putAll(meta.unhandledTags);
     }
 
@@ -307,6 +310,8 @@ class CraftMetaItem implements ItemMeta, Repairable {
             attributes = null;
         }
 
+        unbreakable = tag.getBoolean(UNBREAKABLE.NBT);
+
         Set<String> keys = tag.c();
         for (String key : keys) {
             if (!getHandledTags().contains(key)) {
@@ -349,6 +354,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
         }
 
         attributes = null;
+        unbreakable = SerializableMeta.getBoolean(map, UNBREAKABLE.BUKKIT);
     }
 
     static Map<Enchantment, Integer> buildEnchantments(Map<String, Object> map, ItemMetaKey key) {
@@ -389,6 +395,10 @@ class CraftMetaItem implements ItemMeta, Repairable {
             itemTag.set(ATTRIBUTES.NBT, attributes);
         }
 
+        if(unbreakable) {
+            itemTag.setBoolean(UNBREAKABLE.NBT, true);
+        }
+
         for (Map.Entry<String, NBTBase> e : unhandledTags.entrySet()) {
             itemTag.set(e.getKey(), e.getValue());
         }
@@ -443,7 +453,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
 
     @Overridden
     boolean isEmpty() {
-        return !(hasDisplayName() || hasEnchants() || hasLore() || hasAttributes() || hasRepairCost() || !unhandledTags.isEmpty());
+        return !(hasDisplayName() || hasEnchants() || hasLore() || hasAttributes() || hasRepairCost() || unbreakable || !unhandledTags.isEmpty());
     }
 
     public String getDisplayName() {
@@ -536,6 +546,16 @@ class CraftMetaItem implements ItemMeta, Repairable {
     }
 
     @Override
+    public boolean isUnbreakable() {
+        return unbreakable;
+    }
+
+    @Override
+    public void setUnbreakable(boolean unbreakable) {
+        this.unbreakable = unbreakable;
+    }
+
+    @Override
     public final boolean equals(Object object) {
         if (object == null) {
             return false;
@@ -561,6 +581,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
                 && (this.hasLore() ? that.hasLore() && this.lore.equals(that.lore) : !that.hasLore())
                 && (this.hasAttributes() ? that.hasAttributes() && this.attributes.equals(that.attributes) : !that.hasAttributes())
                 && (this.hasRepairCost() ? that.hasRepairCost() && this.repairCost == that.repairCost : !that.hasRepairCost())
+                && this.unbreakable == that.unbreakable
                 && (this.unhandledTags.equals(that.unhandledTags));
     }
 
@@ -587,6 +608,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
         hash = 61 * hash + (hasEnchants() ? this.enchantments.hashCode() : 0);
         hash = 61 * hash + (hasAttributes() ? this.attributes.hashCode() : 0);
         hash = 61 * hash + (hasRepairCost() ? this.repairCost : 0);
+        hash = 61 * hash + (unbreakable ? 1 : 0);
         hash = 61 * hash + unhandledTags.hashCode();
         return hash;
     }
@@ -631,6 +653,10 @@ class CraftMetaItem implements ItemMeta, Repairable {
             builder.put(REPAIR.BUKKIT, repairCost);
         }
 
+        if(unbreakable) {
+            builder.put(UNBREAKABLE.BUKKIT, true);
+        }
+
         return builder;
     }
 
@@ -698,6 +724,7 @@ class CraftMetaItem implements ItemMeta, Repairable {
                     REPAIR.NBT,
                     ATTRIBUTES.NBT,
                     ENCHANTMENTS.NBT,
+                    UNBREAKABLE.NBT,
                     CraftMetaMap.MAP_SCALING.NBT,
                     CraftMetaPotion.POTION_EFFECTS.NBT,
                     CraftMetaSkull.SKULL_OWNER.NBT,
-- 
1.9.0

