--- a/net/minecraft/server/EntityLiving.java
+++ b/net/minecraft/server/EntityLiving.java
@@ -13,8 +13,40 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import java.util.ArrayList;
+import com.google.common.base.Function;
+import com.google.common.collect.Lists;
+import org.bukkit.Location;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.potion.CraftPotionUtils;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityResurrectEvent;
+import org.bukkit.event.entity.EntityTeleportEvent;
+import org.bukkit.event.entity.PotionEffectAddEvent;
+import org.bukkit.event.entity.PotionEffectExpireEvent;
+import org.bukkit.event.entity.PotionEffectExtendEvent;
+import org.bukkit.event.entity.PotionEffectRemoveEvent;
+import org.bukkit.event.player.PlayerItemConsumeEvent;
+import org.bukkit.event.vehicle.VehicleExitEvent;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+// CraftBukkit end
+
 public abstract class EntityLiving extends Entity {
 
+    // SportBukkit start - add archery attributes
+    public static final IAttribute ARROW_ACCURACY = new AttributeRanged(null, Attribute.ARROW_ACCURACY.getName(), 1, 0, Double.MAX_VALUE);
+    public static final IAttribute ARROW_VELOCITY_TRANSFER = new AttributeRanged(null, Attribute.ARROW_VELOCITY_TRANSFER.getName(), 1, Double.MIN_VALUE, Double.MAX_VALUE);
+    public static final IAttribute SHIELD_STRENGTH = new AttributeRanged(null, Attribute.SHIELD_STRENGTH.getName(), 1, 0, 1);
+    // SportBukkit end
+
     private static final Logger a = LogManager.getLogger();
     private static final UUID b = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
     private static final AttributeModifier c = (new AttributeModifier(EntityLiving.b, "Sprinting speed boost", 0.30000001192092896D, 2)).a(false);
@@ -38,7 +70,7 @@
     public int deathTicks;
     public float aC;
     public float aD;
-    protected int aE;
+    protected int aE; public int ticksSinceLastAttack() { return aE; } // SportBukkit - add accessor
     public float aF;
     public float aG;
     public float aH;
@@ -87,6 +119,14 @@
     private BlockPosition bE;
     private DamageSource bF;
     private long bG;
+    // CraftBukkit start
+    public int expToDrop;
+    public int maxAirTicks = 300;
+    boolean forceDrops;
+    ArrayList<org.bukkit.inventory.ItemStack> drops = new ArrayList<org.bukkit.inventory.ItemStack>();
+    public org.bukkit.craftbukkit.attribute.CraftAttributeMap craftAttributes;
+    public boolean collides = true;
+    // CraftBukkit end
 
     public void Q() {
         this.damageEntity(DamageSource.OUT_OF_WORLD, Float.MAX_VALUE);
@@ -101,7 +141,8 @@
         this.updateEffects = true;
         this.activeItem = ItemStack.a;
         this.initAttributes();
-        this.setHealth(this.getMaxHealth());
+        // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
+        this.datawatcher.set(EntityLiving.HEALTH, (float) this.getAttributeInstance(GenericAttributes.maxHealth).getValue());
         this.i = true;
         this.aM = (float) ((Math.random() + 1.0D) * 0.009999999776482582D);
         this.setPosition(this.locX, this.locY, this.locZ);
@@ -125,6 +166,11 @@
         this.getAttributeMap().b(GenericAttributes.MOVEMENT_SPEED);
         this.getAttributeMap().b(GenericAttributes.g);
         this.getAttributeMap().b(GenericAttributes.h);
+        // SportBukkit start - init our attributes
+        this.getAttributeMap().b(ARROW_ACCURACY);
+        this.getAttributeMap().b(ARROW_VELOCITY_TRANSFER);
+        this.getAttributeMap().b(SHIELD_STRENGTH);
+        // SportBukkit end
     }
 
     protected void a(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {
@@ -139,7 +185,13 @@
                 double d1 = Math.min((double) (0.2F + f / 15.0F), 2.5D);
                 int i = (int) (150.0D * d1);
 
-                ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] { Block.getCombinedId(iblockdata)});
+                // CraftBukkit start - visiblity api
+                if (this instanceof EntityPlayer) {
+                    ((WorldServer) this.world).sendParticles((EntityPlayer) this, EnumParticle.BLOCK_DUST, false, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] { Block.getCombinedId(iblockdata)});
+                } else {
+                    ((WorldServer) this.world).a(EnumParticle.BLOCK_DUST, this.locX, this.locY, this.locZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] { Block.getCombinedId(iblockdata)});
+                }
+                // CraftBukkit end
             }
         }
 
@@ -201,7 +253,11 @@
                     this.stopRiding();
                 }
             } else {
-                this.setAirTicks(300);
+                // CraftBukkit start - Only set if needed to work around a DataWatcher inefficiency
+                if (this.getAirTicks() != 300) {
+                    this.setAirTicks(maxAirTicks);
+                }
+                // CraftBukkit end
             }
 
             if (!this.world.isClientSide) {
@@ -258,6 +314,18 @@
         this.world.methodProfiler.b();
     }
 
+    // CraftBukkit start
+    public int getExpReward() {
+        int exp = this.getExpValue(this.killer);
+
+        if (!this.world.isClientSide && (this.lastDamageByPlayerTime > 0 || this.alwaysGivesExp()) && this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot")) {
+            return exp;
+        } else {
+            return 0;
+        }
+    }
+    // CraftBukkit end
+
     protected void b(BlockPosition blockposition) {
         int i = EnchantmentManager.a(Enchantments.j, this);
 
@@ -273,19 +341,19 @@
 
     protected void bG() {
         ++this.deathTicks;
-        if (this.deathTicks == 20) {
+        if (this.deathTicks >= 20 && !this.dead) { // CraftBukkit - (this.deathTicks == 20) -> (this.deathTicks >= 20 && !this.dead)
             int i;
 
-            if (!this.world.isClientSide && (this.alwaysGivesExp() || this.lastDamageByPlayerTime > 0 && this.isDropExperience() && this.world.getGameRules().getBoolean("doMobLoot"))) {
-                i = this.getExpValue(this.killer);
+            // CraftBukkit start - Update getExpReward() above if the removed if() changes!
+            i = this.expToDrop;
+            while (i > 0) {
+                int j = EntityExperienceOrb.getOrbValue(i);
 
-                while (i > 0) {
-                    int j = EntityExperienceOrb.getOrbValue(i);
-
-                    i -= j;
-                    this.world.addEntity(new EntityExperienceOrb(this.world, this.locX, this.locY, this.locZ, j));
-                }
+                i -= j;
+                this.world.addEntity(new EntityExperienceOrb(this.world, this.locX, this.locY, this.locZ, j));
             }
+            this.expToDrop = 0;
+            // CraftBukkit end
 
             this.die();
 
@@ -441,6 +509,17 @@
             }
         }
 
+        // CraftBukkit start
+        if (nbttagcompound.hasKey("Bukkit.MaxHealth")) {
+            NBTBase nbtbase = nbttagcompound.get("Bukkit.MaxHealth");
+            if (nbtbase.getTypeId() == 5) {
+                this.getAttributeInstance(GenericAttributes.maxHealth).setValue(((NBTTagFloat) nbtbase).asDouble());
+            } else if (nbtbase.getTypeId() == 3) {
+                this.getAttributeInstance(GenericAttributes.maxHealth).setValue(((NBTTagInt) nbtbase).asDouble());
+            }
+        }
+        // CraftBukkit end
+
         if (nbttagcompound.hasKeyOfType("Health", 99)) {
             this.setHealth(nbttagcompound.getFloat("Health"));
         }
@@ -464,25 +543,36 @@
     }
 
     protected void tickPotionEffects() {
-        Iterator iterator = this.effects.keySet().iterator();
+        if(!getBukkitEntity().isPaused()) { // SportBukkit - don't tick effects while paused
+        Iterator<MobEffectList> iterator = com.google.common.collect.ImmutableSet.copyOf(this.effects.keySet()).iterator(); // SportBukkit - copy to allow concurrent modification
 
-        try {
-            while (iterator.hasNext()) {
-                MobEffectList mobeffectlist = (MobEffectList) iterator.next();
-                MobEffect mobeffect = (MobEffect) this.effects.get(mobeffectlist);
-
-                if (!mobeffect.tick(this)) {
-                    if (!this.world.isClientSide) {
-                        iterator.remove();
-                        this.b(mobeffect);
-                    }
-                } else if (mobeffect.getDuration() % 600 == 0) {
-                    this.a(mobeffect, false);
+        while (iterator.hasNext()) {
+            MobEffectList mobeffectlist = (MobEffectList) iterator.next();
+            if(!this.effects.keySet().contains(mobeffectlist)) continue; // SportBukkit - skip if effect was removed during iteration
+            MobEffect mobeffect = (MobEffect) this.effects.get(mobeffectlist);
+
+            if (!mobeffect.tick(this)) {
+                if (!this.world.isClientSide) {
+                    // SportBukkit start - fire event
+                    PotionEffectExpireEvent event = new PotionEffectExpireEvent((LivingEntity) this.getBukkitEntity(),
+                                                                                CraftPotionUtils.toBukkit(mobeffect));
+                    this.world.getServer().getPluginManager().callEvent(event);
+                    if(event.isCancelled()) {
+                        // Duration must be extended if event is cancelled
+                        CraftPotionUtils.extendDuration(mobeffect, event.getDuration());
+                        continue;
+                    }
+
+                    //iterator.remove();
+                    this.effects.remove(mobeffectlist);
+                    // SportBukkit end
+                    this.b(mobeffect);
                 }
+            } else if (mobeffect.getDuration() % 600 == 0) {
+                this.a(mobeffect, false);
             }
-        } catch (ConcurrentModificationException concurrentmodificationexception) {
-            ;
         }
+        } // SportBukkit
 
         if (this.updateEffects) {
             if (!this.world.isClientSide) {
@@ -524,10 +614,18 @@
             this.bQ();
             this.setInvisible(false);
         } else {
+            // SportBukkit start - optionally disable potion particles
+            if(((CraftLivingEntity) getBukkitEntity()).getPotionParticles()) {
+            // SportBukkit end
             Collection collection = this.effects.values();
 
             this.datawatcher.set(EntityLiving.h, Boolean.valueOf(a(collection)));
             this.datawatcher.set(EntityLiving.g, Integer.valueOf(PotionUtil.a(collection)));
+            // SportBukkit start
+            } else {
+                this.clearPotionEffectMetadata();
+            }
+            // SportBukkit end
             this.setInvisible(this.hasEffect(MobEffects.INVISIBILITY));
         }
 
@@ -549,6 +647,7 @@
         return false;
     }
 
+    public void clearPotionEffectMetadata() { this.bQ(); } // SportBukkit - alias for following method
     protected void bQ() {
         this.datawatcher.set(EntityLiving.h, Boolean.valueOf(false));
         this.datawatcher.set(EntityLiving.g, Integer.valueOf(0));
@@ -556,11 +655,14 @@
 
     public void removeAllEffects() {
         if (!this.world.isClientSide) {
-            Iterator iterator = this.effects.values().iterator();
+            Iterator<MobEffectList> iterator = com.google.common.collect.ImmutableSet.copyOf(this.effects.keySet()).iterator(); // SportBukkit - copy to allow concurrent modification
 
             while (iterator.hasNext()) {
-                this.b((MobEffect) iterator.next());
-                iterator.remove();
+                // SportBukkit start - go through method that fires event
+                this.removeEffect(iterator.next());
+                //this.b((MobEffect) iterator.next());
+                //iterator.remove();
+                // SportBukkit end
             }
 
         }
@@ -584,9 +686,22 @@
             MobEffect mobeffect1 = (MobEffect) this.effects.get(mobeffect.getMobEffect());
 
             if (mobeffect1 == null) {
+                // SportBukkit start - fire event
+                PotionEffectAddEvent event = new PotionEffectAddEvent((LivingEntity) this.getBukkitEntity(),
+                                                                      CraftPotionUtils.toBukkit(mobeffect));
+                this.world.getServer().getPluginManager().callEvent(event);
+                if(event.isCancelled()) return;
+                // SportBukkit end
                 this.effects.put(mobeffect.getMobEffect(), mobeffect);
                 this.a(mobeffect);
             } else {
+                // SportBukkit start - fire event
+                PotionEffectExtendEvent event = new PotionEffectExtendEvent((LivingEntity) this.getBukkitEntity(),
+                                                                            CraftPotionUtils.toBukkit(mobeffect),
+                                                                            CraftPotionUtils.toBukkit(this.effects.get(mobeffect.getMobEffect())));
+                this.world.getServer().getPluginManager().callEvent(event);
+                if(event.isCancelled()) return;
+                // SportBukkit end
                 mobeffect1.a(mobeffect);
                 this.a(mobeffect1, true);
             }
@@ -619,6 +734,16 @@
         MobEffect mobeffect = this.c(mobeffectlist);
 
         if (mobeffect != null) {
+            // SportBukkit start
+            PotionEffectRemoveEvent event = new PotionEffectRemoveEvent((LivingEntity) this.getBukkitEntity(),
+                                                                        CraftPotionUtils.toBukkit(mobeffect));
+            this.world.getServer().getPluginManager().callEvent(event);
+            if(event.isCancelled()) {
+                this.effects.put(mobeffectlist, mobeffect);
+                return;
+            }
+            // SportBukkit end
+
             this.b(mobeffect);
         }
 
@@ -651,20 +776,52 @@
 
     }
 
+    // CraftBukkit start - Delegate so we can handle providing a reason for health being regained
     public void heal(float f) {
+        heal(f, EntityRegainHealthEvent.RegainReason.CUSTOM);
+    }
+
+    public void heal(float f, EntityRegainHealthEvent.RegainReason regainReason) {
         float f1 = this.getHealth();
 
         if (f1 > 0.0F) {
-            this.setHealth(f1 + f);
+            EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), f, regainReason);
+            this.world.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+                this.setHealth((float) (this.getHealth() + event.getAmount()));
+            }
+            // CraftBukkit end
         }
 
     }
 
     public final float getHealth() {
+        // CraftBukkit start - Use unscaled health
+        if (this instanceof EntityPlayer) {
+            return (float) ((EntityPlayer) this).getBukkitEntity().getHealth();
+        }
+        // CraftBukkit end
         return ((Float) this.datawatcher.get(EntityLiving.HEALTH)).floatValue();
     }
 
     public void setHealth(float f) {
+        // CraftBukkit start - Handle scaled health
+        if (this instanceof EntityPlayer) {
+            org.bukkit.craftbukkit.entity.CraftPlayer player = ((EntityPlayer) this).getBukkitEntity();
+            // Squeeze
+            if (f < 0.0F) {
+                player.setRealHealth(0.0D);
+            } else if (f > player.getMaxHealth()) {
+                player.setRealHealth(player.getMaxHealth());
+            } else {
+                player.setRealHealth(f);
+            }
+
+            this.datawatcher.set(EntityLiving.HEALTH, Float.valueOf(player.getScaledHealth()));
+            return;
+        }
+        // CraftBukkit end
         this.datawatcher.set(EntityLiving.HEALTH, Float.valueOf(MathHelper.a(f, 0.0F, this.getMaxHealth())));
     }
 
@@ -674,20 +831,23 @@
         } else if (this.world.isClientSide) {
             return false;
         } else {
+            f = Math.min(f, Float.MAX_VALUE / 0x100); // SportBukkit - clamp huge values that will overflow and become NaN
             this.ticksFarFromPlayer = 0;
             if (this.getHealth() <= 0.0F) {
                 return false;
             } else if (damagesource.o() && this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
                 return false;
             } else {
-                if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && !this.getEquipment(EnumItemSlot.HEAD).isEmpty()) {
+                // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+                if (false && (damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && !this.getEquipment(EnumItemSlot.HEAD).isEmpty()) {
                     this.getEquipment(EnumItemSlot.HEAD).damage((int) (f * 4.0F + this.random.nextFloat() * f * 2.0F), this);
                     f *= 0.75F;
                 }
 
-                boolean flag = false;
+                boolean flag = f > 0.0F && this.applyBlockingModifier(damagesource); // Copied from below
 
-                if (f > 0.0F && this.applyBlockingModifier(damagesource)) {
+                // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+                if (false && f > 0.0F && this.applyBlockingModifier(damagesource)) {
                     this.damageShield(f);
                     f = 0.0F;
                     if (!damagesource.a()) {
@@ -706,20 +866,39 @@
 
                 if ((float) this.noDamageTicks > (float) this.maxNoDamageTicks / 2.0F) {
                     if (f <= this.lastDamage) {
+                        this.forceExplosionKnockback = true; // CraftBukkit - SPIGOT-949 - for vanilla consistency, cooldown does not prevent explosion knockback
                         return false;
                     }
 
-                    this.damageEntity0(damagesource, f - this.lastDamage);
+                    // CraftBukkit start
+                    if (!this.damageEntity0(damagesource, f - this.lastDamage)) {
+                        return false;
+                    }
+                    // CraftBukkit end
                     this.lastDamage = f;
                     flag1 = false;
                 } else {
+                    // CraftBukkit start
+                    if (!this.damageEntity0(damagesource, f)) {
+                        return false;
+                    }
                     this.lastDamage = f;
                     this.noDamageTicks = this.maxNoDamageTicks;
-                    this.damageEntity0(damagesource, f);
+                    // this.damageEntity0(damagesource, f);
+                    // CraftBukkit end
                     this.az = 10;
                     this.hurtTicks = this.az;
                 }
 
+                // CraftBukkit start
+                if(this instanceof EntityAnimal){
+                    ((EntityAnimal)this).resetLove();
+                    if(this instanceof EntityTameableAnimal){
+                        ((EntityTameableAnimal)this).getGoalSit().setSitting(false);
+                    }
+                }
+                // CraftBukkit end
+
                 this.aA = 0.0F;
                 Entity entity1 = damagesource.getEntity();
 
@@ -764,7 +943,7 @@
                         }
 
                         this.aA = (float) (MathHelper.c(d1, d0) * 57.2957763671875D - (double) this.yaw);
-                        this.a(entity1, 0.4F, d0, d1);
+                        this.a(damagesource.i(), 0.4F, d0, d1); // SportBukkit - use direct damage source instead of owner
                     } else {
                         this.aA = (float) ((int) (Math.random() * 2.0D) * 180);
                     }
@@ -806,18 +985,27 @@
             EnumHand[] aenumhand = EnumHand.values();
             int i = aenumhand.length;
 
+            // CraftBukkit start
+            ItemStack itemstack = ItemStack.a;
             for (int j = 0; j < i; ++j) {
                 EnumHand enumhand = aenumhand[j];
-                ItemStack itemstack = this.b(enumhand);
+                itemstack = this.b(enumhand);
 
                 if (itemstack.getItem() == Items.cY) {
-                    itemstack.subtract(1);
+                    // itemstack.subtract(1);
                     flag = true;
                     break;
                 }
             }
 
+            EntityResurrectEvent event = new EntityResurrectEvent((LivingEntity) this.getBukkitEntity());
+            event.setCancelled(!flag);
+            this.world.getServer().getPluginManager().callEvent(event);
+            flag = !event.isCancelled();
+
             if (flag) {
+                itemstack.subtract(1);
+                // CraftBukkit end
                 if (this instanceof EntityHuman) {
                     ((EntityHuman) this).b(StatisticList.b(Items.cY));
                 }
@@ -914,6 +1102,12 @@
                     boolean flag = this.lastDamageByPlayerTime > 0;
 
                     this.a(flag, i, damagesource);
+                    // CraftBukkit start - Call death event
+                    CraftEventFactory.callEntityDeathEvent(this, this.drops);
+                    this.drops = new ArrayList<org.bukkit.inventory.ItemStack>();
+                } else {
+                    CraftEventFactory.callEntityDeathEvent(this);
+                    // CraftBukkit end
                 }
             }
 
@@ -928,26 +1122,30 @@
 
     protected void dropEquipment(boolean flag, int i) {}
 
-    public void a(Entity entity, float f, double d0, double d1) {
-        if (this.random.nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue()) {
-            this.impulse = true;
-            float f1 = MathHelper.sqrt(d0 * d0 + d1 * d1);
-
-            this.motX /= 2.0D;
-            this.motZ /= 2.0D;
-            this.motX -= d0 / (double) f1 * (double) f;
-            this.motZ -= d1 / (double) f1 * (double) f;
-            if (this.onGround) {
-                this.motY /= 2.0D;
-                this.motY += (double) f;
-                if (this.motY > 0.4000000059604645D) {
-                    this.motY = 0.4000000059604645D;
-                }
-            }
-
+    // SportBukkit - velocity API
+    @Override
+    public double knockbackScale() {
+        if(random.nextDouble() >= getAttributeMap().a("generic.knockbackResistance").getValue()) {
+            return super.knockbackScale();
+        } else {
+            return 0;
         }
     }
 
+    public void a(Entity entity, float magnitude, double fromX, double fromZ) {
+        final boolean vertical = onGround || getBukkitEntity().getServer().getLegacyKnockback();
+        final double len = MathHelper.sqrt(fromX * fromX + fromZ * fromZ);
+
+        applyKnockback(
+            entity,
+            -motX / 2 - fromX * magnitude / len,
+            (vertical ? Math.min(0.4, motY / 2 + magnitude) - motY : 0),
+            -motZ / 2 - fromZ * magnitude / len,
+            false
+        );
+    }
+    // SportBukkit end
+
     @Nullable
     protected SoundEffect bW() {
         return SoundEffects.bR;
@@ -1003,8 +1201,13 @@
         int i = MathHelper.f((f - 3.0F - f2) * f1);
 
         if (i > 0) {
+            // CraftBukkit start
+            if (!this.damageEntity(DamageSource.FALL, (float) i)) {
+                return;
+            }
+            // CraftBukkit end
             this.a(this.e(i), 1.0F, 1.0F);
-            this.damageEntity(DamageSource.FALL, (float) i);
+            // this.damageEntity(DamageSource.FALL, (float) i); // CraftBukkit - moved up
             int j = MathHelper.floor(this.locX);
             int k = MathHelper.floor(this.locY - 0.20000000298023224D);
             int l = MathHelper.floor(this.locZ);
@@ -1031,7 +1234,7 @@
 
     protected float applyArmorModifier(DamageSource damagesource, float f) {
         if (!damagesource.ignoresArmor()) {
-            this.damageArmor(f);
+            // this.damageArmor(f); // CraftBukkit - Moved into damageEntity0(DamageSource, float)
             f = CombatMath.a(f, (float) this.getArmorStrength(), (float) this.getAttributeInstance(GenericAttributes.h).getValue());
         }
 
@@ -1044,7 +1247,8 @@
         } else {
             int i;
 
-            if (this.hasEffect(MobEffects.RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
+            // CraftBukkit - Moved to damageEntity0(DamageSource, float)
+            if (false && this.hasEffect(MobEffects.RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
                 i = (this.getEffect(MobEffects.RESISTANCE).getAmplifier() + 1) * 5;
                 int j = 25 - i;
                 float f1 = f * (float) j;
@@ -1065,22 +1269,126 @@
         }
     }
 
-    protected void damageEntity0(DamageSource damagesource, float f) {
-        if (!this.isInvulnerable(damagesource)) {
-            f = this.applyArmorModifier(damagesource, f);
-            f = this.applyMagicModifier(damagesource, f);
-            float f1 = f;
-
-            f = Math.max(f - this.getAbsorptionHearts(), 0.0F);
-            this.setAbsorptionHearts(this.getAbsorptionHearts() - (f1 - f));
-            if (f != 0.0F) {
+    // CraftBukkit start
+    protected boolean damageEntity0(final DamageSource damagesource, float f) { // void -> boolean, add final
+       if (!this.isInvulnerable(damagesource)) {
+            final boolean human = this instanceof EntityHuman;
+            float originalDamage = f;
+            Function<Double, Double> hardHat = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && !EntityLiving.this.getEquipment(EnumItemSlot.HEAD).isEmpty()) {
+                        return -(f - (f * 0.75F));
+
+                    }
+                    return -0.0;
+                }
+            };
+            float hardHatModifier = hardHat.apply((double) f).floatValue();
+            f += hardHatModifier;
+
+            Function<Double, Double> blocking = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -((EntityLiving.this.applyBlockingModifier(damagesource)) ? getAttributeInstance(SHIELD_STRENGTH).getValue() * f : 0.0); // SportBukkit - shield strength
+                }
+            };
+            float blockingModifier = blocking.apply((double) f).floatValue();
+            f += blockingModifier;
+
+            Function<Double, Double> armor = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(f - EntityLiving.this.applyArmorModifier(damagesource, f.floatValue()));
+                }
+            };
+            float armorModifier = armor.apply((double) f).floatValue();
+            f += armorModifier;
+
+            Function<Double, Double> resistance = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    if (!damagesource.isStarvation() && EntityLiving.this.hasEffect(MobEffects.RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
+                        int i = (EntityLiving.this.getEffect(MobEffects.RESISTANCE).getAmplifier() + 1) * 5;
+                        int j = 25 - i;
+                        float f1 = f.floatValue() * (float) j;
+                        return -(f - (f1 / 25.0F));
+                    }
+                    return -0.0;
+                }
+            };
+            float resistanceModifier = resistance.apply((double) f).floatValue();
+            f += resistanceModifier;
+
+            Function<Double, Double> magic = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(f - EntityLiving.this.applyMagicModifier(damagesource, f.floatValue()));
+                }
+            };
+            float magicModifier = magic.apply((double) f).floatValue();
+            f += magicModifier;
+
+            Function<Double, Double> absorption = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(Math.max(f - Math.max(f - EntityLiving.this.getAbsorptionHearts(), 0.0F), 0.0F));
+                }
+            };
+            float absorptionModifier = absorption.apply((double) f).floatValue();
+
+            EntityDamageEvent event = CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
+            if (event.isCancelled()) {
+                return false;
+            }
+
+            f = (float) event.getFinalDamage();
+
+            // Apply damage to helmet
+            if ((damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && this.getEquipment(EnumItemSlot.HEAD) != null) {
+                this.getEquipment(EnumItemSlot.HEAD).damage((int) (event.getDamage() * 4.0F + this.random.nextFloat() * event.getDamage() * 2.0F), this);
+            }
+
+            // Apply damage to armor
+            if (!damagesource.ignoresArmor()) {
+                float armorDamage = (float) (event.getDamage() + event.getDamage(DamageModifier.BLOCKING) + event.getDamage(DamageModifier.HARD_HAT));
+                this.damageArmor(armorDamage);
+            }
+
+            // Apply blocking code // PAIL: steal from above
+            if (event.getDamage(DamageModifier.BLOCKING) < 0) {
+                this.damageShield((float) -event.getDamage(DamageModifier.BLOCKING));
+                Entity entity = damagesource.i();
+
+                if (entity instanceof EntityLiving) {
+                    this.c((EntityLiving) entity);
+                }
+            }
+
+            absorptionModifier = (float) -event.getDamage(DamageModifier.ABSORPTION);
+            this.setAbsorptionHearts(Math.max(this.getAbsorptionHearts() - absorptionModifier, 0.0F));
+            if (f > 0 || !human) {
+                if (human) {
+                    // PAIL: Be sure to drag all this code from the EntityHuman subclass each update.
+                    ((EntityHuman) this).applyExhaustion(damagesource.getExhaustionCost());
+                    if (f < 3.4028235E37F) {
+                        ((EntityHuman) this).a(StatisticList.z, Math.round(f * 10.0F));
+                    }
+                }
+                // CraftBukkit end
                 float f2 = this.getHealth();
 
                 this.setHealth(f2 - f);
                 this.getCombatTracker().trackDamage(damagesource, f2, f);
-                this.setAbsorptionHearts(this.getAbsorptionHearts() - f);
+                // CraftBukkit start
+                if (!human) {
+                    this.setAbsorptionHearts(this.getAbsorptionHearts() - f);
+                }
             }
+            return true;
+            // CraftBukkit end
         }
+        return false; // CraftBukkit
     }
 
     public CombatTracker getCombatTracker() {
@@ -1096,10 +1404,12 @@
         return (float) this.getAttributeInstance(GenericAttributes.maxHealth).getValue();
     }
 
+    public int getArrowsStuck() { return cc(); } // SportBukkit - alias for next method
     public final int cc() {
         return ((Integer) this.datawatcher.get(EntityLiving.bq)).intValue();
     }
 
+    public void setArrowsStuck(int arrows) { f(arrows); } // SportBukkit - alias for next method
     public final void f(int i) {
         this.datawatcher.set(EntityLiving.bq, Integer.valueOf(i));
     }
@@ -1147,6 +1457,7 @@
     public AttributeMapBase getAttributeMap() {
         if (this.attributeMap == null) {
             this.attributeMap = new AttributeMapServer();
+            this.craftAttributes = new CraftAttributeMap(attributeMap); // CraftBukkit
         }
 
         return this.attributeMap;
@@ -1438,6 +1749,7 @@
                 }
 
                 if (this.onGround && !this.world.isClientSide) {
+                    if (getFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) // CraftBukkit
                     this.setFlag(7, false);
                 }
             } else {
@@ -1798,6 +2110,7 @@
         }
 
         if (!this.world.isClientSide) {
+            if (flag != this.getFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, flag).isCancelled()) // CraftBukkit
             this.setFlag(7, flag);
         }
 
@@ -1808,7 +2121,7 @@
     protected void ct() {
         List list = this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.a(this));
 
-        if (!list.isEmpty()) {
+        if (this.isCollidable() && !list.isEmpty()) { // SportBukkit - check if collidable
             int i = this.world.getGameRules().c("maxEntityCramming");
             int j;
 
@@ -1895,16 +2208,18 @@
     }
 
     public boolean isInteractable() {
-        return !this.dead;
+        return !this.dead && this.collides; // CraftBukkit
     }
 
     public boolean isCollidable() {
-        return this.isAlive() && !this.m_();
+        return this.isAlive() && !this.m_() && this.collides; // CraftBukkit
     }
 
+    /* SportBukkit - this is not needed
     protected void ap() {
         this.velocityChanged = this.random.nextDouble() >= this.getAttributeInstance(GenericAttributes.c).getValue();
     }
+    SportBukkit */
 
     public float getHeadRotation() {
         return this.aP;
@@ -2036,8 +2351,38 @@
     protected void v() {
         if (!this.activeItem.isEmpty() && this.isHandRaised()) {
             this.a(this.activeItem, 16);
-            this.a(this.cz(), this.activeItem.a(this.world, this));
+            // CraftBukkit start - fire PlayerItemConsumeEvent
+            org.bukkit.inventory.ItemStack craftItem = CraftItemStack.asBukkitCopy(this.activeItem);
+            PlayerItemConsumeEvent event = new PlayerItemConsumeEvent((Player) this.getBukkitEntity(), craftItem);
+            world.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                // Update client
+                if (this instanceof EntityPlayer) {
+                    ((EntityPlayer) this).getBukkitEntity().updateInventory();
+                    ((EntityPlayer) this).getBukkitEntity().updateScaledHealth();
+                }
+                return;
+            }
+
+            ItemStack itemstack = (craftItem.equals(event.getItem())) ? this.activeItem.a(this.world, this) : CraftItemStack.asNMSCopy(event.getItem()).a(world, this);
+
+            // SportBukkit start - save the default replacement item and change it if necessary
+            final ItemStack defaultReplacement = itemstack;
+            if(event.getReplacement() != null) {
+                itemstack = CraftItemStack.asNMSCopy(event.getReplacement());
+            }
+            // SportBukkit end
+
+            this.a(this.cz(), itemstack);
+            // CraftBukkit end
             this.cF();
+
+            // SportBukkit start - if the replacement is anything but the default, update the client inventory
+            if(this instanceof EntityPlayer && !com.google.common.base.Objects.equal(defaultReplacement, itemstack)) {
+                ((EntityPlayer) this).getBukkitEntity().updateInventory();
+            }
+            // SportBukkit end
         }
 
     }
@@ -2115,10 +2460,18 @@
             }
 
             if (flag1) {
-                this.enderTeleportTo(this.locX, this.locY, this.locZ);
-                if (world.getCubes(this, this.getBoundingBox()).isEmpty() && !world.containsLiquid(this.getBoundingBox())) {
-                    flag = true;
+                // CraftBukkit start - Teleport event
+                // this.enderTeleportTo(this.locX, this.locY, this.locZ);
+                EntityTeleportEvent teleport = new EntityTeleportEvent(this.getBukkitEntity(), new Location(this.world.getWorld(), d3, d4, d5), new Location(this.world.getWorld(), this.locX, this.locY, this.locZ));
+                this.world.getServer().getPluginManager().callEvent(teleport);
+                if (!teleport.isCancelled()) {
+                    Location to = teleport.getTo();
+                    this.enderTeleportTo(to.getX(), to.getY(), to.getZ());
+                    if (world.getCubes(this, this.getBoundingBox()).isEmpty() && !world.containsLiquid(this.getBoundingBox())) {
+                        flag = true;
+                    }
                 }
+                // CraftBukkit end
             }
         }
 
